
        
        HAL_TIM_Base_Start(&htim8);
        
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
        
        HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
        HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
        HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);

        float omegas[4] = { 0 };
        int16_t counts[4] = { 0 };

        
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
        
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
        
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

        set_DutyCycle_Primary(&htim8, TIM_CHANNEL_1, 65535);
        set_DutyCycle_Primary(&htim8, TIM_CHANNEL_2, 65535);
        set_DutyCycle_Primary(&htim8, TIM_CHANNEL_3, 65535);
        set_DutyCycle_Primary(&htim8, TIM_CHANNEL_4, 65535);
        
                printf("%ld   ", HAL_GetTick());
                for (uint8_t i = 0; i < 4; ++i) {
                        printf("%ld   ", (int32_t)(omegas[i]*1000));
                }
                printf("\n");

                counts[0] = htim3.Instance->CNT;
                counts[1] = htim1.Instance->CNT;
                counts[2] = htim4.Instance->CNT;
                counts[3] = htim2.Instance->CNT;

                htim3.Instance->CNT = 0;
                htim1.Instance->CNT = 0;
                htim4.Instance->CNT = 0;
                htim2.Instance->CNT = 0;

                float ratio = 2.0 * M_PI / (4.0 * 249.6);

                for (uint8_t i = 0; i < 4; ++i) {
                        omegas[i] = (-1.0)*(ratio) * (float)counts[i]*1000 / (float)(dt + last_run_time);
                }