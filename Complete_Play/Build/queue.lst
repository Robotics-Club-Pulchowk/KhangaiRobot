ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueFull,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvIsQueueFull:
  25              	.LFB25:
  26              		.file 1 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeR
   1:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
   2:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     All rights reserved
   4:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
   5:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
   7:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     This file is part of the FreeRTOS distribution.
   8:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
   9:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  13:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     ***************************************************************************
  14:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     ***************************************************************************
  19:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  20:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     link: http://www.freertos.org/a00114.html
  24:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  25:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     ***************************************************************************
  26:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *                                                                       *
  27:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    platform software that is more than just the market leader, it     *
  30:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    is the industry's de facto standard.                               *
  31:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *                                                                       *
  32:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 2


  33:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****      *                                                                       *
  37:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     ***************************************************************************
  38:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  39:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     defined configASSERT()?
  42:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  43:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     embedded software for free we request you assist our global community by
  45:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     participating in the support forum.
  46:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  47:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  52:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  56:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  59:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  63:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     mission critical applications that require provable dependability.
  66:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  67:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****     1 tab == 4 spaces!
  68:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** */
  69:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  70:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #include <stdlib.h>
  71:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #include <string.h>
  72:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  73:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** task.h is included from an application file. */
  76:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  78:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #include "FreeRTOS.h"
  79:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #include "task.h"
  80:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #include "queue.h"
  81:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  82:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#include "croutine.h"
  84:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif
  85:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  86:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** header files above, but not in this file, in order to generate the correct
  89:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 3


  90:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  92:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  93:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  97:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** alternative implementation would be to use a union, but use of a union is
 105:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** against the coding standard (although an exception to the standard has been
 106:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** permitted where the dual use also significantly changes the type of the
 107:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** structure member). */
 108:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define pxMutexHolder					pcTail
 109:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define uxQueueType						pcHead
 110:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 112:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** zero. */
 114:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 117:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	performed just because a higher priority task has been woken. */
 120:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #else
 122:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif
 124:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 125:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 126:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Definition of the queue used by the scheduler.
 127:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 130:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** typedef struct QueueDefinition
 131:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 132:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 136:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 138:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	} u;
 141:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 142:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 145:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 4


 147:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 149:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 152:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
 155:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 156:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
 159:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 160:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		UBaseType_t uxQueueNumber;
 162:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		uint8_t ucQueueType;
 163:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
 164:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 165:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } xQUEUE;
 166:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 167:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** typedef xQUEUE Queue_t;
 170:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 171:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 172:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 173:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 174:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 177:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 179:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	more user friendly. */
 182:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 184:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		QueueHandle_t xHandle;
 186:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	} xQueueRegistryItem;
 187:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 188:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	debuggers. */
 191:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 193:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	array position being vacant. */
 196:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 198:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 200:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 201:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 5


 204:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 208:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static void prvUnlockQueue( Queue_t * const pxQueue );
 209:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 210:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 211:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  *
 213:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 215:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue );
 216:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 217:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 218:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  *
 220:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 222:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvIsQueueFull( const Queue_t *pxQueue );
 223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 224:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 225:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * back of the queue.
 227:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 228:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvIt
 229:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 230:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 231:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Copies an item out of a queue.
 232:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 233:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffe
 234:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 235:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/*
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	 * the queue set that the queue contains data.
 239:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	 */
 240:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, c
 241:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif
 242:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 243:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 244:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * dynamically to fill in the structure's members.
 246:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 247:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBase
 248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 249:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
 250:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * as a mutex.
 253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 254:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( configUSE_MUTEXES == 1 )
 255:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	PRIVILEGED_FUNCTION static void prvInitialiseMutex( Queue_t *pxNewQueue );
 256:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif
 257:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 258:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 259:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 260:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 6


 261:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  * accessing the queue event lists.
 263:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c ****  */
 264:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #define prvLockQueue( pxQueue )								\
 265:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();									\
 266:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{														\
 267:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{													\
 269:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}													\
 271:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{													\
 273:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}													\
 275:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}														\
 276:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL()
 277:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 278:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 279:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 281:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 283:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
 284:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 285:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
 286:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 287:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 294:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xNewQueue == pdFALSE )
 295:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 296:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			it will be possible to write to it. */
 301:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 303:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 305:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 307:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
 308:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 309:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 311:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 312:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 313:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 314:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 316:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 317:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 7


 318:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 319:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 323:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 324:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
 325:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 326:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	versions. */
 328:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return pdPASS;
 329:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
 330:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 331:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 332:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 334:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 336:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 337:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 338:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 340:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		supplied. */
 342:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 344:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		should not be provided if the item size is 0. */
 346:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 349:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 351:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			the real queue and semaphore structures. */
 354:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 357:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		#endif /* configASSERT_DEFINED */
 358:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 359:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		The address of a statically allocated storage area was also passed in
 361:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		but is already set. */
 362:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 364:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxNewQueue != NULL )
 365:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 366:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 368:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				note this queue was allocated statically in case the queue is
 370:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				later deleted. */
 371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 373:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 8


 375:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 377:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 378:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pxNewQueue;
 379:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 380:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 381:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 383:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 384:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 386:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 388:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 389:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	size_t xQueueSizeInBytes;
 390:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uint8_t *pucQueueStorage;
 391:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 392:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 394:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 396:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* There is not going to be a queue storage area. */
 397:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 399:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 400:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 401:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			can be in the queue at any time. */
 403:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 405:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 406:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 408:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxNewQueue != NULL )
 409:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 410:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			storage area. */
 412:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 414:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 416:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				note this task was created dynamically in case it is later
 418:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				deleted. */
 419:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 421:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 423:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 425:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 426:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pxNewQueue;
 427:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 428:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 429:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 431:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 9


 432:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 434:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	( void ) ucQueueType;
 437:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 438:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 440:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		value that is known to be within the memory map. */
 444:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 446:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	else
 447:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 448:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 451:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 452:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	defined. */
 454:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 458:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 460:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 462:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 464:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 466:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 468:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 470:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
 472:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 473:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 474:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( configUSE_MUTEXES == 1 )
 475:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 476:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 478:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxNewQueue != NULL )
 479:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 480:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* The queue create function will set all the queue structure members
 481:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			correctly for a generic queue, but this function is creating a
 482:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			in particular the information required for priority inheritance. */
 484:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 487:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* In case this is a recursive mutex. */
 488:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 10


 489:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 490:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 492:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Start with the semaphore in the expected state. */
 493:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 495:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 496:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 497:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 499:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 500:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 501:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_MUTEXES */
 502:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 503:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 504:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 506:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 508:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 509:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 511:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 514:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pxNewQueue;
 515:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 516:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 517:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_MUTEXES */
 518:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 519:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 520:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 522:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 524:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 525:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 527:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( void ) ucQueueType;
 530:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 531:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 534:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pxNewQueue;
 535:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 536:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 537:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_MUTEXES */
 538:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 539:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 540:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 542:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 544:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	void *pxReturn;
 545:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 11


 546:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		following critical section exiting and the function returning. */
 551:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskENTER_CRITICAL();
 552:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 553:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 555:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 557:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 558:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 559:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxReturn = NULL;
 560:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 561:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 562:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskEXIT_CRITICAL();
 563:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 564:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pxReturn;
 565:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 567:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif
 568:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 569:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 570:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 572:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 574:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xReturn;
 575:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 577:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( pxMutex );
 578:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 579:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		this is the only condition we are interested in it does not matter if
 583:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 587:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 589:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			uxRecursiveCallCount member. */
 594:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 596:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 599:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				task that might be waiting to access the mutex. */
 601:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 12


 603:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 604:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 605:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 607:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 608:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
 609:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 610:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 611:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 612:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			holder. */
 614:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFAIL;
 615:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 616:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 618:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 619:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xReturn;
 620:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 621:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 622:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 624:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 625:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 627:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 629:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xReturn;
 630:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 632:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( pxMutex );
 633:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 634:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xQueueGiveMutexRecursive(). */
 636:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 637:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 639:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 641:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
 643:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 644:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 645:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 646:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 648:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			before reaching here. */
 651:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( xReturn != pdFAIL )
 652:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 653:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 655:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 656:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 657:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 659:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 13


 660:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 661:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xReturn;
 662:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 663:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 664:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 666:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 667:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 669:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 671:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xHandle;
 672:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 673:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 676:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 678:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xHandle != NULL )
 679:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 680:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 682:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 684:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 685:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 686:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 688:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 689:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xHandle;
 690:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 691:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 692:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 694:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 695:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 697:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	QueueHandle_t xHandle;
 700:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 701:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 704:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 706:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xHandle != NULL )
 707:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 708:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 710:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 712:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 713:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 714:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 716:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 14


 717:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xHandle;
 718:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 719:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 720:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 722:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 723:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 725:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** TimeOut_t xTimeOut;
 727:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 729:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
 730:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 734:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 736:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
 737:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 738:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 739:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	statements within the function itself.  This is done in the interest
 741:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	of execution time efficiency. */
 742:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	for( ;; )
 743:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 744:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskENTER_CRITICAL();
 745:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 746:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			queue is full. */
 750:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 752:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 755:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 757:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 759:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 761:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The queue is a member of a queue set, and posting
 762:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							to the queue set caused a higher priority task to
 763:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							unblock. A context switch is required. */
 764:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 766:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
 767:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 768:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 770:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 771:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
 772:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 773:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* If there was a task waiting for data to arrive on the
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 15


 774:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						queue then unblock it now. */
 775:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 777:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 779:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								/* The unblocked task has a priority higher than
 780:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								do this from within the critical section - the
 782:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								kernel takes care of that. */
 783:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 785:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
 786:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 787:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 789:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 790:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 792:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* This path is a special case that will only get
 793:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							executed if the task was holding multiple mutexes
 794:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							and the mutexes were given back in an order that is
 795:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							different to that in which they were taken. */
 796:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 798:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
 799:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 800:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 802:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 803:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 804:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 806:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					queue then unblock it now. */
 808:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 810:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 812:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The unblocked task has a priority higher than
 813:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							this from within the critical section - the kernel
 815:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							takes care of that. */
 816:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 818:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
 819:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 820:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 822:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 823:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 825:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* This path is a special case that will only get
 826:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						executed if the task was holding multiple mutexes and
 827:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						the mutexes were given back in an order that is
 828:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						different to that in which they were taken. */
 829:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 16


 831:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
 832:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 833:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 835:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 836:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 838:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				taskEXIT_CRITICAL();
 839:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				return pdPASS;
 840:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 841:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 842:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 843:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 845:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The queue was full and no block time is specified (or
 846:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					the block time has expired) so leave now. */
 847:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					taskEXIT_CRITICAL();
 848:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 849:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* Return to the original privilege level before exiting
 850:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					the function. */
 851:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_FULL;
 853:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 854:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 856:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The queue was full and a block time was specified so
 857:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					configure the timeout structure. */
 858:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					xEntryTimeSet = pdTRUE;
 860:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 861:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
 862:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 863:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* Entry time was already set. */
 864:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 866:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 867:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 868:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskEXIT_CRITICAL();
 869:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 870:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		now the critical section has been exited. */
 872:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 873:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		vTaskSuspendAll();
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvLockQueue( pxQueue );
 875:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 876:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 879:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 881:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 884:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				remove this task from the event	list again - but as the
 887:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				scheduler is suspended the task will go onto the pending
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 17


 888:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				ready last instead of the actual ready list. */
 889:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvUnlockQueue( pxQueue );
 890:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 891:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				ready list into the ready list - so it is feasible that this
 893:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				task is already in a ready list before it yields - in which
 894:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				case the yield will not cause a context switch unless there
 895:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				is also a higher priority task in the pending ready list. */
 896:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 898:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portYIELD_WITHIN_API();
 899:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 900:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 901:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
 902:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 903:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Try again. */
 904:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvUnlockQueue( pxQueue );
 905:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) xTaskResumeAll();
 906:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 907:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 908:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
 909:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 910:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* The timeout has expired. */
 911:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvUnlockQueue( pxQueue );
 912:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) xTaskResumeAll();
 913:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 914:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			return errQUEUE_FULL;
 916:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 917:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 918:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
 919:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 920:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 921:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 923:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 924:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 927:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
 928:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 931:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 18


 945:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 947:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	post). */
 952:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 954:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 956:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 958:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 960:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			called here even though the disinherit function does not check if
 964:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 967:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			be done when the queue is unlocked later. */
 969:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 971:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 973:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 975:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 977:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The queue is a member of a queue set, and posting
 978:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							to the queue set caused a higher priority task to
 979:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							unblock.  A context switch is required. */
 980:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 982:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 984:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
 985:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 986:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 988:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 989:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
 990:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 991:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 993:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 994:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
 995:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 996:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 998:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1000:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								/* The task waiting has a higher priority so
1001:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								record that a context switch is required. */
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 19


1002:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								{
1004:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								}
1006:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								else
1007:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								{
1008:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								}
1010:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1011:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
1012:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1013:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1015:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1016:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1017:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1018:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1020:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1021:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1022:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1024:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1026:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1028:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The task waiting has a higher priority so record that a
1029:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							context	switch is required. */
1030:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1032:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1034:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
1035:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1036:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1038:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1039:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1040:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1041:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1043:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1044:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1045:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1046:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1048:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1049:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1051:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1052:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1053:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				knows that data was posted while it was locked. */
1055:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1057:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1058:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 20


1059:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1060:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1061:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1062:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = errQUEUE_FULL;
1064:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1065:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1066:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1068:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1069:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1070:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1071:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1072:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1074:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1075:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1078:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	post). */
1083:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1084:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1085:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1086:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if the item size is not 0. */
1088:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1090:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	interrupts, only tasks. */
1093:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1095:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1111:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1113:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1115:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 21


1116:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		space'. */
1118:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1120:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1122:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1124:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			messages (semaphores) available. */
1130:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1132:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			be done when the queue is unlocked later. */
1134:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1136:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1138:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1140:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1142:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The semaphore is a member of a queue set, and
1143:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							posting	to the queue set caused a higher priority
1144:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							task to	unblock.  A context switch is required. */
1145:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1147:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1149:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
1150:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1151:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1153:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1154:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1155:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1156:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1158:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1159:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1160:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1161:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1163:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1165:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								/* The task waiting has a higher priority so
1166:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								record that a context switch is required. */
1167:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								{
1169:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								}
1171:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								else
1172:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 22


1173:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								}
1175:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1176:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
1177:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1178:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1180:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1181:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1182:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1183:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1185:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1186:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1187:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1189:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1191:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1193:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The task waiting has a higher priority so record that a
1194:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							context	switch is required. */
1195:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1197:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1199:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							else
1200:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
1201:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
1203:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1204:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1205:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1206:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1208:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1209:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1210:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1211:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1213:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1214:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1216:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1217:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1218:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				knows that data was posted while it was locked. */
1220:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1222:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
1224:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1225:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1226:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1227:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = errQUEUE_FULL;
1229:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 23


1230:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1231:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1233:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1234:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1235:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1236:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1239:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** TimeOut_t xTimeOut;
1241:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** int8_t *pcOriginalReadPosition;
1242:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1244:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1250:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
1251:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1252:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	statements within the function itself.  This is done in the interest
1254:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	of execution time efficiency. */
1255:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1256:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	for( ;; )
1257:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1258:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskENTER_CRITICAL();
1259:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1260:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1262:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1266:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Remember the read position in case the queue is only being
1267:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				peeked. */
1268:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1270:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1272:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xJustPeeking == pdFALSE )
1273:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1274:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1276:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* Actually removing data, not just peeking. */
1277:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1279:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1281:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1283:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* Record the information required to implement
1284:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							priority inheritance should it become necessary. */
1285:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 24


1287:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1288:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1289:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1291:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1292:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					#endif /* configUSE_MUTEXES */
1293:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1294:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1296:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1298:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1300:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1301:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1302:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1304:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1305:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1306:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1307:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1309:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1310:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1311:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1312:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1314:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The data is not being removed, so reset the read
1315:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					pointer. */
1316:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1318:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The data is being left in the queue, so see if there are
1319:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					any other tasks waiting for the data. */
1320:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1322:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1324:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1327:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1328:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1329:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1331:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1332:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1333:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1334:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1336:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1337:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1338:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				taskEXIT_CRITICAL();
1339:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				return pdPASS;
1340:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1341:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1342:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1343:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 25


1344:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1345:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The queue was empty and no block time is specified (or
1346:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					the block time has expired) so leave now. */
1347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					taskEXIT_CRITICAL();
1348:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_EMPTY;
1350:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1351:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1353:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* The queue was empty and a block time was specified so
1354:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					configure the timeout structure. */
1355:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					xEntryTimeSet = pdTRUE;
1357:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1358:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1359:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1360:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* Entry time was already set. */
1361:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1363:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1364:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1365:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		taskEXIT_CRITICAL();
1366:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1367:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		now the critical section has been exited. */
1369:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1370:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		vTaskSuspendAll();
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvLockQueue( pxQueue );
1372:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1373:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1376:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1378:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1380:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1382:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1384:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						taskENTER_CRITICAL();
1385:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1386:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1388:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						taskEXIT_CRITICAL();
1389:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1390:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1391:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1392:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1394:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1395:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				#endif
1396:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1397:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvUnlockQueue( pxQueue );
1399:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 26


1401:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portYIELD_WITHIN_API();
1402:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1403:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1404:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1405:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1407:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1408:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1409:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1410:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Try again. */
1411:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvUnlockQueue( pxQueue );
1412:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) xTaskResumeAll();
1413:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1414:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1415:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1416:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1417:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvUnlockQueue( pxQueue );
1418:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) xTaskResumeAll();
1419:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1420:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1422:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				return errQUEUE_EMPTY;
1424:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1425:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1426:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1427:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1429:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1430:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1431:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1432:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1433:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1434:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1436:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1437:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1440:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1441:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1443:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 27


1458:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1459:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1461:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1463:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1466:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1468:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1470:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1473:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			will know that an ISR has removed data while the queue was
1476:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			locked. */
1477:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1479:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1481:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1483:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* The task waiting has a higher priority than us so
1484:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						force a context switch. */
1485:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1487:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1489:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1490:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1491:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1493:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1494:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1495:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1496:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1498:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1499:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1500:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1501:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1503:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1504:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1505:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1506:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				knows that data was removed while it was locked. */
1508:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1510:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1511:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
1512:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1513:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1514:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 28


1515:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFAIL;
1516:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1518:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1519:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1521:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1522:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1523:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1524:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1525:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1527:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1528:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** int8_t *pcOriginalReadPosition;
1530:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1532:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1533:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1536:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1552:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1554:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1557:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1559:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			actually being removed from the queue. */
1561:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1565:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
1566:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1567:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1568:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1569:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFAIL;
1570:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 29


1572:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1573:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1575:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1576:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1577:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1578:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1579:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1581:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
1582:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1583:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( xQueue );
1584:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1585:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
1586:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1587:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1589:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
1590:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1591:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return uxReturn;
1592:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1594:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1595:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1597:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
1598:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t *pxQueue;
1599:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1600:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1602:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1603:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
1604:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1605:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1607:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
1608:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1609:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return uxReturn;
1610:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1612:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1613:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1615:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
1616:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1617:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( xQueue );
1618:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1619:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1621:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return uxReturn;
1622:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1624:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1625:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1627:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 30


1629:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue );
1630:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1632:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1634:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1636:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif
1637:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1638:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1640:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		again. */
1642:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		vPortFree( pxQueue );
1643:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1644:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1646:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		check before attempting to free the memory. */
1648:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1650:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			vPortFree( pxQueue );
1651:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1652:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1653:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1654:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1656:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1657:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#else
1658:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1659:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( void ) pxQueue;
1662:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1663:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1665:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1666:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1667:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1669:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1671:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1673:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1674:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1676:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1677:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1679:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1681:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1683:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1684:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 31


1686:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1687:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1689:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1691:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1693:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1694:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1696:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1697:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn = pdFALSE;
1700:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxMessagesWaiting;
1701:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1702:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* This function is called from a critical section. */
1703:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1704:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1706:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1708:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1710:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1712:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* The mutex is no longer being held. */
1713:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1716:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1717:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1718:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1720:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1721:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		#endif /* configUSE_MUTEXES */
1722:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1723:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1725:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1729:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1731:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1732:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1733:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1735:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1736:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	else
1737:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1738:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1741:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1742:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 32


1743:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1744:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1745:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1746:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1748:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1749:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( xPosition == queueOVERWRITE )
1750:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1751:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1753:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				one from the recorded number of items in the queue so when
1755:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				one is added again below the number of recorded items remains
1756:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				correct. */
1757:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				--uxMessagesWaiting;
1758:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1759:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1760:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1761:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1763:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1764:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1765:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1766:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1768:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1769:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1770:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1772:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1773:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1774:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1775:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1776:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1778:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1780:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1783:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1785:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1786:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1787:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1789:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1791:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1792:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1793:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1794:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1796:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1798:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	removed from the queue while the queue was locked.  When a queue is
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 33


1800:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	updated. */
1802:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
1803:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1804:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1806:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1809:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			blocked waiting for data to become available? */
1811:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1813:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1815:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1817:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						the queue set caused a higher priority task to unblock.
1819:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						A context switch is required. */
1820:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						vTaskMissedYield();
1821:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1822:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1823:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1824:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1826:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1827:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1828:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1829:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* Tasks that are removed from the event list will get
1830:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					added to the pending ready list as the scheduler is still
1831:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					suspended. */
1832:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1834:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1836:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							/* The task waiting has a higher priority so record that a
1837:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							context	switch is required. */
1838:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							vTaskMissedYield();
1839:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1840:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						else
1841:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
1842:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
1844:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1845:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1846:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1847:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						break;
1848:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1849:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1850:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1851:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1853:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 34


1857:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1859:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* The task waiting has a higher priority so record that
1860:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						a context switch is required. */
1861:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						vTaskMissedYield();
1862:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1863:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
1864:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
1865:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
1867:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1868:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1869:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1870:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					break;
1871:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1872:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1873:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1875:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			--cTxLock;
1876:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1877:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1878:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1880:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
1881:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1882:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Do the same for the Rx lock. */
1883:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
1884:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1885:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1887:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1889:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1891:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1893:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					vTaskMissedYield();
1894:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1895:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
1896:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
1897:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
1899:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1900:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				--cRxLock;
1901:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1902:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
1903:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
1904:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				break;
1905:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
1906:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1907:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1908:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1910:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
1911:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1912:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1913:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 35


1914:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1916:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1917:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1918:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
1919:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1920:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1922:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdTRUE;
1923:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1924:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1925:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1926:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFALSE;
1927:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1928:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1929:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
1930:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1931:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1932:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
1933:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1934:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1935:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
1937:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1938:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1939:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( xQueue );
1940:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1942:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xReturn = pdTRUE;
1943:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1944:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	else
1945:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1946:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xReturn = pdFALSE;
1947:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1948:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1949:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1950:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1952:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1953:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
  27              		.loc 1 1954 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
1955:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1956:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1957:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskENTER_CRITICAL();
  38              		.loc 1 1957 0
  39 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 36


  40              	.LVL1:
1958:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1959:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  41              		.loc 1 1959 0
  42 0008 A26B     		ldr	r2, [r4, #56]
  43 000a E36B     		ldr	r3, [r4, #60]
  44 000c 9A42     		cmp	r2, r3
  45 000e 04D0     		beq	.L5
1960:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1961:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdTRUE;
1962:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1963:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
1964:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
1965:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFALSE;
  46              		.loc 1 1965 0
  47 0010 0024     		movs	r4, #0
  48              	.LVL2:
  49              	.L2:
1966:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
1967:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1968:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	taskEXIT_CRITICAL();
  50              		.loc 1 1968 0
  51 0012 FFF7FEFF 		bl	vPortExitCritical
  52              	.LVL3:
1969:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1970:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1971:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
  53              		.loc 1 1971 0
  54 0016 2046     		mov	r0, r4
  55 0018 10BD     		pop	{r4, pc}
  56              	.LVL4:
  57              	.L5:
1961:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
  58              		.loc 1 1961 0
  59 001a 0124     		movs	r4, #1
  60              	.LVL5:
  61 001c F9E7     		b	.L2
  62              		.cfi_endproc
  63              	.LFE25:
  65              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  66              		.align	1
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	prvIsQueueEmpty:
  73              	.LFB23:
1915:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
  74              		.loc 1 1915 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              	.LVL6:
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 37


  83              		.cfi_offset 14, -4
  84 0002 0446     		mov	r4, r0
1918:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
  85              		.loc 1 1918 0
  86 0004 FFF7FEFF 		bl	vPortEnterCritical
  87              	.LVL7:
1920:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
  88              		.loc 1 1920 0
  89 0008 A36B     		ldr	r3, [r4, #56]
  90 000a 23B1     		cbz	r3, .L10
1926:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
  91              		.loc 1 1926 0
  92 000c 0024     		movs	r4, #0
  93              	.LVL8:
  94              	.L7:
1929:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
  95              		.loc 1 1929 0
  96 000e FFF7FEFF 		bl	vPortExitCritical
  97              	.LVL9:
1932:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
  98              		.loc 1 1932 0
  99 0012 2046     		mov	r0, r4
 100 0014 10BD     		pop	{r4, pc}
 101              	.LVL10:
 102              	.L10:
1922:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 103              		.loc 1 1922 0
 104 0016 0124     		movs	r4, #1
 105              	.LVL11:
 106 0018 F9E7     		b	.L7
 107              		.cfi_endproc
 108              	.LFE23:
 110              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	prvCopyDataToQueue:
 118              	.LFB20:
1698:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn = pdFALSE;
 119              		.loc 1 1698 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              	.LVL12:
 124 0000 70B5     		push	{r4, r5, r6, lr}
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 16
 127              		.cfi_offset 4, -16
 128              		.cfi_offset 5, -12
 129              		.cfi_offset 6, -8
 130              		.cfi_offset 14, -4
 131 0002 0446     		mov	r4, r0
 132 0004 1646     		mov	r6, r2
 133              	.LVL13:
1704:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 38


 134              		.loc 1 1704 0
 135 0006 856B     		ldr	r5, [r0, #56]
 136              	.LVL14:
1706:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 137              		.loc 1 1706 0
 138 0008 026C     		ldr	r2, [r0, #64]
 139              	.LVL15:
 140 000a 5AB9     		cbnz	r2, .L12
1710:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 141              		.loc 1 1710 0
 142 000c 0368     		ldr	r3, [r0]
 143 000e 1BB1     		cbz	r3, .L21
1699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxMessagesWaiting;
 144              		.loc 1 1699 0
 145 0010 0020     		movs	r0, #0
 146              	.LVL16:
 147              	.L13:
1770:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 148              		.loc 1 1770 0
 149 0012 0135     		adds	r5, r5, #1
 150              	.LVL17:
 151 0014 A563     		str	r5, [r4, #56]
1773:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 152              		.loc 1 1773 0
 153 0016 70BD     		pop	{r4, r5, r6, pc}
 154              	.LVL18:
 155              	.L21:
1713:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->pxMutexHolder = NULL;
 156              		.loc 1 1713 0
 157 0018 4068     		ldr	r0, [r0, #4]
 158              	.LVL19:
 159 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 160              	.LVL20:
1714:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 161              		.loc 1 1714 0
 162 001e 0023     		movs	r3, #0
 163 0020 6360     		str	r3, [r4, #4]
 164 0022 F6E7     		b	.L13
 165              	.LVL21:
 166              	.L12:
1723:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 167              		.loc 1 1723 0
 168 0024 6EB9     		cbnz	r6, .L14
1725:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 169              		.loc 1 1725 0
 170 0026 8068     		ldr	r0, [r0, #8]
 171              	.LVL22:
 172 0028 FFF7FEFF 		bl	memcpy
 173              	.LVL23:
1726:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 174              		.loc 1 1726 0
 175 002c 226C     		ldr	r2, [r4, #64]
 176 002e A368     		ldr	r3, [r4, #8]
 177 0030 1344     		add	r3, r3, r2
 178 0032 A360     		str	r3, [r4, #8]
1727:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 179              		.loc 1 1727 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 39


 180 0034 6268     		ldr	r2, [r4, #4]
 181 0036 9342     		cmp	r3, r2
 182 0038 19D3     		bcc	.L17
1729:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 183              		.loc 1 1729 0
 184 003a 2368     		ldr	r3, [r4]
 185 003c A360     		str	r3, [r4, #8]
1699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxMessagesWaiting;
 186              		.loc 1 1699 0
 187 003e 0020     		movs	r0, #0
 188 0040 E7E7     		b	.L13
 189              	.LVL24:
 190              	.L14:
1738:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 191              		.loc 1 1738 0
 192 0042 C068     		ldr	r0, [r0, #12]
 193              	.LVL25:
 194 0044 FFF7FEFF 		bl	memcpy
 195              	.LVL26:
1739:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 196              		.loc 1 1739 0
 197 0048 226C     		ldr	r2, [r4, #64]
 198 004a 5242     		negs	r2, r2
 199 004c E368     		ldr	r3, [r4, #12]
 200 004e 1344     		add	r3, r3, r2
 201 0050 E360     		str	r3, [r4, #12]
1740:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 202              		.loc 1 1740 0
 203 0052 2168     		ldr	r1, [r4]
 204 0054 8B42     		cmp	r3, r1
 205 0056 02D2     		bcs	.L15
1742:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 206              		.loc 1 1742 0
 207 0058 6368     		ldr	r3, [r4, #4]
 208 005a 1A44     		add	r2, r2, r3
 209 005c E260     		str	r2, [r4, #12]
 210              	.L15:
1749:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 211              		.loc 1 1749 0
 212 005e 022E     		cmp	r6, #2
 213 0060 01D0     		beq	.L22
1699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxMessagesWaiting;
 214              		.loc 1 1699 0
 215 0062 0020     		movs	r0, #0
 216 0064 D5E7     		b	.L13
 217              	.L22:
1751:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 218              		.loc 1 1751 0
 219 0066 25B1     		cbz	r5, .L19
1757:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 220              		.loc 1 1757 0
 221 0068 013D     		subs	r5, r5, #1
 222              	.LVL27:
1699:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxMessagesWaiting;
 223              		.loc 1 1699 0
 224 006a 0020     		movs	r0, #0
 225 006c D1E7     		b	.L13
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 40


 226              	.L17:
 227 006e 0020     		movs	r0, #0
 228 0070 CFE7     		b	.L13
 229              	.L19:
 230 0072 0020     		movs	r0, #0
 231 0074 CDE7     		b	.L13
 232              		.cfi_endproc
 233              	.LFE20:
 235              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 236              		.align	1
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv4-sp-d16
 242              	prvCopyDataFromQueue:
 243              	.LFB21:
1777:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 244              		.loc 1 1777 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL28:
1778:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 249              		.loc 1 1778 0
 250 0000 026C     		ldr	r2, [r0, #64]
 251 0002 72B1     		cbz	r2, .L27
1777:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 252              		.loc 1 1777 0
 253 0004 10B5     		push	{r4, lr}
 254              	.LCFI3:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 14, -4
1780:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 258              		.loc 1 1780 0
 259 0006 C368     		ldr	r3, [r0, #12]
 260 0008 1344     		add	r3, r3, r2
 261 000a C360     		str	r3, [r0, #12]
1781:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 262              		.loc 1 1781 0
 263 000c 4468     		ldr	r4, [r0, #4]
 264 000e A342     		cmp	r3, r4
 265 0010 01D3     		bcc	.L25
1783:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 266              		.loc 1 1783 0
 267 0012 0368     		ldr	r3, [r0]
 268 0014 C360     		str	r3, [r0, #12]
 269              	.L25:
 270 0016 0C46     		mov	r4, r1
1789:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 271              		.loc 1 1789 0
 272 0018 C168     		ldr	r1, [r0, #12]
 273              	.LVL29:
 274 001a 2046     		mov	r0, r4
 275              	.LVL30:
 276 001c FFF7FEFF 		bl	memcpy
 277              	.LVL31:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 41


1791:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 278              		.loc 1 1791 0
 279 0020 10BD     		pop	{r4, pc}
 280              	.LVL32:
 281              	.L27:
 282              	.LCFI4:
 283              		.cfi_def_cfa_offset 0
 284              		.cfi_restore 4
 285              		.cfi_restore 14
 286 0022 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE21:
 290              		.section	.text.prvUnlockQueue,"ax",%progbits
 291              		.align	1
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	prvUnlockQueue:
 298              	.LFB22:
1795:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 299              		.loc 1 1795 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL33:
 304 0000 38B5     		push	{r3, r4, r5, lr}
 305              	.LCFI5:
 306              		.cfi_def_cfa_offset 16
 307              		.cfi_offset 3, -16
 308              		.cfi_offset 4, -12
 309              		.cfi_offset 5, -8
 310              		.cfi_offset 14, -4
 311 0002 0546     		mov	r5, r0
1802:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 312              		.loc 1 1802 0
 313 0004 FFF7FEFF 		bl	vPortEnterCritical
 314              	.LVL34:
 315              	.LBB85:
1804:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 316              		.loc 1 1804 0
 317 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 318 000c 64B2     		sxtb	r4, r4
 319              	.LVL35:
1807:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 320              		.loc 1 1807 0
 321 000e 03E0     		b	.L31
 322              	.L40:
1861:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 323              		.loc 1 1861 0
 324 0010 FFF7FEFF 		bl	vTaskMissedYield
 325              	.LVL36:
 326              	.L33:
1875:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 327              		.loc 1 1875 0
 328 0014 013C     		subs	r4, r4, #1
 329              	.LVL37:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 42


 330 0016 64B2     		sxtb	r4, r4
 331              	.LVL38:
 332              	.L31:
1807:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 333              		.loc 1 1807 0
 334 0018 002C     		cmp	r4, #0
 335 001a 08DD     		ble	.L32
1855:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 336              		.loc 1 1855 0
 337 001c 6B6A     		ldr	r3, [r5, #36]
 338 001e 33B1     		cbz	r3, .L32
1857:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 339              		.loc 1 1857 0
 340 0020 05F12400 		add	r0, r5, #36
 341 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 342              	.LVL39:
 343 0028 0028     		cmp	r0, #0
 344 002a F3D0     		beq	.L33
 345 002c F0E7     		b	.L40
 346              	.L32:
1878:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 347              		.loc 1 1878 0
 348 002e FF23     		movs	r3, #255
 349 0030 85F84530 		strb	r3, [r5, #69]
 350              	.LBE85:
1880:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 351              		.loc 1 1880 0
 352 0034 FFF7FEFF 		bl	vPortExitCritical
 353              	.LVL40:
1883:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 354              		.loc 1 1883 0
 355 0038 FFF7FEFF 		bl	vPortEnterCritical
 356              	.LVL41:
 357              	.LBB86:
1885:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 358              		.loc 1 1885 0
 359 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 360              	.LVL42:
 361 0040 64B2     		sxtb	r4, r4
 362              	.LVL43:
1887:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 363              		.loc 1 1887 0
 364 0042 03E0     		b	.L35
 365              	.L41:
1893:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 366              		.loc 1 1893 0
 367 0044 FFF7FEFF 		bl	vTaskMissedYield
 368              	.LVL44:
 369              	.L37:
1900:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 370              		.loc 1 1900 0
 371 0048 013C     		subs	r4, r4, #1
 372              	.LVL45:
 373 004a 64B2     		sxtb	r4, r4
 374              	.LVL46:
 375              	.L35:
1887:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 43


 376              		.loc 1 1887 0
 377 004c 002C     		cmp	r4, #0
 378 004e 08DD     		ble	.L36
1889:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 379              		.loc 1 1889 0
 380 0050 2B69     		ldr	r3, [r5, #16]
 381 0052 33B1     		cbz	r3, .L36
1891:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 382              		.loc 1 1891 0
 383 0054 05F11000 		add	r0, r5, #16
 384 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 385              	.LVL47:
 386 005c 0028     		cmp	r0, #0
 387 005e F3D0     		beq	.L37
 388 0060 F0E7     		b	.L41
 389              	.L36:
1908:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 390              		.loc 1 1908 0
 391 0062 FF23     		movs	r3, #255
 392 0064 85F84430 		strb	r3, [r5, #68]
 393              	.LBE86:
1910:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** }
 394              		.loc 1 1910 0
 395 0068 FFF7FEFF 		bl	vPortExitCritical
 396              	.LVL48:
1911:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 397              		.loc 1 1911 0
 398 006c 38BD     		pop	{r3, r4, r5, pc}
 399              		.cfi_endproc
 400              	.LFE22:
 402              		.section	.text.xQueueGenericReset,"ax",%progbits
 403              		.align	1
 404              		.global	xQueueGenericReset
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 408              		.fpu fpv4-sp-d16
 410              	xQueueGenericReset:
 411              	.LFB5:
 280:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 412              		.loc 1 280 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              	.LVL49:
 417 0000 38B5     		push	{r3, r4, r5, lr}
 418              	.LCFI6:
 419              		.cfi_def_cfa_offset 16
 420              		.cfi_offset 3, -16
 421              		.cfi_offset 4, -12
 422              		.cfi_offset 5, -8
 423              		.cfi_offset 14, -4
 424              	.LVL50:
 283:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 425              		.loc 1 283 0
 426 0002 40B9     		cbnz	r0, .L43
 427              	.LBB87:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 44


 428              	.LBB88:
 429              		.file 2 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeR
   1:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*
   2:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     All rights reserved
   4:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   5:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   7:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
   9:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  13:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  14:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  19:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  20:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  25:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  26:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  27:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    is the industry's de facto standard.                               *
  31:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  32:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****      *                                                                       *
  37:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     ***************************************************************************
  38:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  39:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     defined configASSERT()?
  42:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  43:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     embedded software for free we request you assist our global community by
  45:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     participating in the support forum.
  46:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  47:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  52:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 45


  56:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  59:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  63:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     mission critical applications that require provable dependability.
  66:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  67:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****     1 tab == 4 spaces!
  68:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** */
  69:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  70:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  71:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef PORTMACRO_H
  72:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define PORTMACRO_H
  73:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  74:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifdef __cplusplus
  75:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern "C" {
  76:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
  77:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  78:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------
  79:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * Port specific definitions.
  80:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  81:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * given hardware and compiler.
  83:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *
  84:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  * These settings should not be altered.
  85:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  *-----------------------------------------------------------
  86:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h ****  */
  87:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  88:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Type definitions. */
  89:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portCHAR		char
  90:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portFLOAT		float
  91:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portDOUBLE		double
  92:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portLONG		long
  93:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSHORT		short
  94:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portBASE_TYPE	long
  96:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
  97:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef long BaseType_t;
  99:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** typedef unsigned long UBaseType_t;
 100:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 101:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	typedef uint16_t TickType_t;
 103:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #else
 105:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	typedef uint32_t TickType_t;
 106:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 108:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	not need to be guarded with a critical section. */
 110:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 112:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 46


 113:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 114:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specifics. */
 115:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 119:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 120:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Scheduler utilities. */
 121:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portYIELD() 															\
 122:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {																				\
 123:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 																				\
 126:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile( "dsb" );													\
 129:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile( "isb" );													\
 130:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 131:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 132:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 137:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 138:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Critical section management. */
 139:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern void vPortEnterCritical( void );
 140:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** extern void vPortExitCritical( void );
 141:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 148:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 149:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 150:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** (which build with all the ports) will build. */
 153:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 156:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 157:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Tickless idle/low power functionality. */
 158:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 162:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 163:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 164:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* Architecture specific optimisations. */
 165:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 168:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 169:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 47


 170:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 171:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Generic helper function. */
 172:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	{
 174:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	uint8_t ucReturn;
 175:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 176:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		return ucReturn;
 178:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	}
 179:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 180:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Check the configuration. */
 181:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#endif
 184:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 185:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 189:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/*-----------------------------------------------------------*/
 190:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 191:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 193:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 195:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 196:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 197:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifdef configASSERT
 198:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 201:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 202:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /* portNOP() is not required by this port. */
 203:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portNOP()
 204:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 205:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #define portINLINE	__inline
 206:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 207:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #ifndef portFORCE_INLINE
 208:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** #endif
 210:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 211:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 213:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** uint32_t ulCurrentInterrupt;
 214:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** BaseType_t xReturn;
 215:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 216:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 219:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	{
 221:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		xReturn = pdFALSE;
 222:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	}
 223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	else
 224:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	{
 225:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		xReturn = pdTRUE;
 226:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 48


 227:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 228:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	return xReturn;
 229:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 230:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 231:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 232:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 233:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 235:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** uint32_t ulNewBASEPRI;
 236:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 430              		.loc 2 237 0
 431              		.syntax unified
 432              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 433 0004 4FF05003 			mov r3, #80												
 434 0008 83F31188 		msr basepri, r3											
 435 000c BFF36F8F 		isb														
 436 0010 BFF34F8F 		dsb														
 437              	
 438              	@ 0 "" 2
 439              	.LVL51:
 440              		.thumb
 441              		.syntax unified
 442              	.L44:
 443 0014 FEE7     		b	.L44
 444              	.L43:
 445 0016 0446     		mov	r4, r0
 446 0018 0D46     		mov	r5, r1
 447              	.LBE88:
 448              	.LBE87:
 285:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 449              		.loc 1 285 0
 450 001a FFF7FEFF 		bl	vPortEnterCritical
 451              	.LVL52:
 287:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 452              		.loc 1 287 0
 453 001e 2168     		ldr	r1, [r4]
 454 0020 E26B     		ldr	r2, [r4, #60]
 455 0022 236C     		ldr	r3, [r4, #64]
 456 0024 03FB0210 		mla	r0, r3, r2, r1
 457 0028 6060     		str	r0, [r4, #4]
 288:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 458              		.loc 1 288 0
 459 002a 0020     		movs	r0, #0
 460 002c A063     		str	r0, [r4, #56]
 289:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 461              		.loc 1 289 0
 462 002e A160     		str	r1, [r4, #8]
 290:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 463              		.loc 1 290 0
 464 0030 013A     		subs	r2, r2, #1
 465 0032 02FB0313 		mla	r3, r2, r3, r1
 466 0036 E360     		str	r3, [r4, #12]
 291:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 467              		.loc 1 291 0
 468 0038 FF23     		movs	r3, #255
 469 003a 84F84430 		strb	r3, [r4, #68]
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 49


 292:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 470              		.loc 1 292 0
 471 003e 84F84530 		strb	r3, [r4, #69]
 294:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 472              		.loc 1 294 0
 473 0042 A5B9     		cbnz	r5, .L45
 301:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 474              		.loc 1 301 0
 475 0044 2369     		ldr	r3, [r4, #16]
 476 0046 1BB9     		cbnz	r3, .L48
 477              	.L46:
 324:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 478              		.loc 1 324 0
 479 0048 FFF7FEFF 		bl	vPortExitCritical
 480              	.LVL53:
 329:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 481              		.loc 1 329 0
 482 004c 0120     		movs	r0, #1
 483 004e 38BD     		pop	{r3, r4, r5, pc}
 484              	.LVL54:
 485              	.L48:
 303:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 486              		.loc 1 303 0
 487 0050 04F11000 		add	r0, r4, #16
 488 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 489              	.LVL55:
 490 0058 0028     		cmp	r0, #0
 491 005a F5D0     		beq	.L46
 305:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 492              		.loc 1 305 0
 493 005c 084B     		ldr	r3, .L49
 494 005e 4FF08052 		mov	r2, #268435456
 495 0062 1A60     		str	r2, [r3]
 496              		.syntax unified
 497              	@ 305 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 498 0064 BFF34F8F 		dsb
 499              	@ 0 "" 2
 500              	@ 305 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 501 0068 BFF36F8F 		isb
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505 006c ECE7     		b	.L46
 506              	.L45:
 320:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 507              		.loc 1 320 0
 508 006e 04F11000 		add	r0, r4, #16
 509 0072 FFF7FEFF 		bl	vListInitialise
 510              	.LVL56:
 321:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 511              		.loc 1 321 0
 512 0076 04F12400 		add	r0, r4, #36
 513 007a FFF7FEFF 		bl	vListInitialise
 514              	.LVL57:
 515 007e E3E7     		b	.L46
 516              	.L50:
 517              		.align	2
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 50


 518              	.L49:
 519 0080 04ED00E0 		.word	-536810236
 520              		.cfi_endproc
 521              	.LFE5:
 523              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 524              		.align	1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv4-sp-d16
 530              	prvInitialiseNewQueue:
 531              	.LFB7:
 433:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	/* Remove compiler warnings about unused parameters should
 532              		.loc 1 433 0
 533              		.cfi_startproc
 534              		@ args = 4, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL58:
 537 0000 10B5     		push	{r4, lr}
 538              	.LCFI7:
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 4, -8
 541              		.cfi_offset 14, -4
 542 0002 029B     		ldr	r3, [sp, #8]
 543              	.LVL59:
 438:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 544              		.loc 1 438 0
 545 0004 0C46     		mov	r4, r1
 546 0006 39B9     		cbnz	r1, .L52
 444:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 547              		.loc 1 444 0
 548 0008 1B60     		str	r3, [r3]
 549              	.L53:
 454:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 550              		.loc 1 454 0
 551 000a D863     		str	r0, [r3, #60]
 455:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 552              		.loc 1 455 0
 553 000c 1C64     		str	r4, [r3, #64]
 456:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 554              		.loc 1 456 0
 555 000e 0121     		movs	r1, #1
 556              	.LVL60:
 557 0010 1846     		mov	r0, r3
 558              	.LVL61:
 559 0012 FFF7FEFF 		bl	xQueueGenericReset
 560              	.LVL62:
 471:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 561              		.loc 1 471 0
 562 0016 10BD     		pop	{r4, pc}
 563              	.LVL63:
 564              	.L52:
 449:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 565              		.loc 1 449 0
 566 0018 1A60     		str	r2, [r3]
 567 001a F6E7     		b	.L53
 568              		.cfi_endproc
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 51


 569              	.LFE7:
 571              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 572              		.align	1
 573              		.global	xQueueGenericCreateStatic
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv4-sp-d16
 579              	xQueueGenericCreateStatic:
 580              	.LFB6:
 335:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 581              		.loc 1 335 0
 582              		.cfi_startproc
 583              		@ args = 4, pretend = 0, frame = 8
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL64:
 338:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 586              		.loc 1 338 0
 587 0000 40B9     		cbnz	r0, .L56
 588              	.LBB89:
 589              	.LBB90:
 590              		.loc 2 237 0
 591              		.syntax unified
 592              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 593 0002 4FF05003 			mov r3, #80												
 594 0006 83F31188 		msr basepri, r3											
 595 000a BFF36F8F 		isb														
 596 000e BFF34F8F 		dsb														
 597              	
 598              	@ 0 "" 2
 599              	.LVL65:
 600              		.thumb
 601              		.syntax unified
 602              	.L57:
 603 0012 FEE7     		b	.L57
 604              	.LVL66:
 605              	.L56:
 606              	.LBE90:
 607              	.LBE89:
 335:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 608              		.loc 1 335 0
 609 0014 10B5     		push	{r4, lr}
 610              	.LCFI8:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 4, -8
 613              		.cfi_offset 14, -4
 614 0016 84B0     		sub	sp, sp, #16
 615              	.LCFI9:
 616              		.cfi_def_cfa_offset 24
 617 0018 0446     		mov	r4, r0
 342:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 618              		.loc 1 342 0
 619 001a 53B1     		cbz	r3, .L68
 346:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 620              		.loc 1 346 0
 621 001c 92B1     		cbz	r2, .L60
 346:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 52


 622              		.loc 1 346 0 is_stmt 0 discriminator 2
 623 001e 89B9     		cbnz	r1, .L60
 624              	.LBB91:
 625              	.LBB92:
 626              		.loc 2 237 0 is_stmt 1
 627              		.syntax unified
 628              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 629 0020 4FF05003 			mov r3, #80												
 630 0024 83F31188 		msr basepri, r3											
 631 0028 BFF36F8F 		isb														
 632 002c BFF34F8F 		dsb														
 633              	
 634              	@ 0 "" 2
 635              	.LVL67:
 636              		.thumb
 637              		.syntax unified
 638              	.L61:
 639 0030 FEE7     		b	.L61
 640              	.LVL68:
 641              	.L68:
 642              	.LBE92:
 643              	.LBE91:
 644              	.LBB93:
 645              	.LBB94:
 646              		.syntax unified
 647              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 648 0032 4FF05003 			mov r3, #80												
 649 0036 83F31188 		msr basepri, r3											
 650 003a BFF36F8F 		isb														
 651 003e BFF34F8F 		dsb														
 652              	
 653              	@ 0 "" 2
 654              	.LVL69:
 655              		.thumb
 656              		.syntax unified
 657              	.L59:
 658 0042 FEE7     		b	.L59
 659              	.LVL70:
 660              	.L60:
 661              	.LBE94:
 662              	.LBE93:
 347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 663              		.loc 1 347 0
 664 0044 4AB9     		cbnz	r2, .L62
 347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 665              		.loc 1 347 0 is_stmt 0 discriminator 2
 666 0046 41B1     		cbz	r1, .L62
 667              	.LBB95:
 668              	.LBB96:
 669              		.loc 2 237 0 is_stmt 1
 670              		.syntax unified
 671              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 672 0048 4FF05003 			mov r3, #80												
 673 004c 83F31188 		msr basepri, r3											
 674 0050 BFF36F8F 		isb														
 675 0054 BFF34F8F 		dsb														
 676              	
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 53


 677              	@ 0 "" 2
 678              	.LVL71:
 679              		.thumb
 680              		.syntax unified
 681              	.L63:
 682 0058 FEE7     		b	.L63
 683              	.LVL72:
 684              	.L62:
 685              	.LBE96:
 686              	.LBE95:
 687              	.LBB97:
 354:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 688              		.loc 1 354 0
 689 005a 4820     		movs	r0, #72
 690              	.LVL73:
 691 005c 0390     		str	r0, [sp, #12]
 355:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 692              		.loc 1 355 0
 693 005e 0398     		ldr	r0, [sp, #12]
 694 0060 4828     		cmp	r0, #72
 695 0062 08D0     		beq	.L64
 696              	.LBB98:
 697              	.LBB99:
 698              		.loc 2 237 0
 699              		.syntax unified
 700              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 701 0064 4FF05003 			mov r3, #80												
 702 0068 83F31188 		msr basepri, r3											
 703 006c BFF36F8F 		isb														
 704 0070 BFF34F8F 		dsb														
 705              	
 706              	@ 0 "" 2
 707              	.LVL74:
 708              		.thumb
 709              		.syntax unified
 710              	.L65:
 711 0074 FEE7     		b	.L65
 712              	.LVL75:
 713              	.L64:
 714 0076 2046     		mov	r0, r4
 715 0078 1C46     		mov	r4, r3
 716              	.LVL76:
 717              	.LBE99:
 718              	.LBE98:
 719              	.LBE97:
 375:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 720              		.loc 1 375 0
 721 007a 0093     		str	r3, [sp]
 722 007c 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 723              	.LVL77:
 724 0080 FFF7FEFF 		bl	prvInitialiseNewQueue
 725              	.LVL78:
 379:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 726              		.loc 1 379 0
 727 0084 2046     		mov	r0, r4
 728 0086 04B0     		add	sp, sp, #16
 729              	.LCFI10:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 54


 730              		.cfi_def_cfa_offset 8
 731              		@ sp needed
 732 0088 10BD     		pop	{r4, pc}
 733              		.cfi_endproc
 734              	.LFE6:
 736              		.section	.text.xQueueGenericSend,"ax",%progbits
 737              		.align	1
 738              		.global	xQueueGenericSend
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu fpv4-sp-d16
 744              	xQueueGenericSend:
 745              	.LFB10:
 724:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 746              		.loc 1 724 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 16
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              	.LVL79:
 751 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 752              	.LCFI11:
 753              		.cfi_def_cfa_offset 20
 754              		.cfi_offset 4, -20
 755              		.cfi_offset 5, -16
 756              		.cfi_offset 6, -12
 757              		.cfi_offset 7, -8
 758              		.cfi_offset 14, -4
 759 0002 85B0     		sub	sp, sp, #20
 760              	.LCFI12:
 761              		.cfi_def_cfa_offset 40
 762 0004 0192     		str	r2, [sp, #4]
 763              	.LVL80:
 729:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 764              		.loc 1 729 0
 765 0006 60B1     		cbz	r0, .L94
 766 0008 0446     		mov	r4, r0
 730:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 767              		.loc 1 730 0
 768 000a 99B9     		cbnz	r1, .L72
 730:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 769              		.loc 1 730 0 is_stmt 0 discriminator 2
 770 000c 026C     		ldr	r2, [r0, #64]
 771              	.LVL81:
 772 000e 8AB1     		cbz	r2, .L72
 773              	.LBB100:
 774              	.LBB101:
 775              		.loc 2 237 0 is_stmt 1
 776              		.syntax unified
 777              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 778 0010 4FF05003 			mov r3, #80												
 779 0014 83F31188 		msr basepri, r3											
 780 0018 BFF36F8F 		isb														
 781 001c BFF34F8F 		dsb														
 782              	
 783              	@ 0 "" 2
 784              	.LVL82:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 55


 785              		.thumb
 786              		.syntax unified
 787              	.L73:
 788 0020 FEE7     		b	.L73
 789              	.LVL83:
 790              	.L94:
 791              	.LBE101:
 792              	.LBE100:
 793              	.LBB102:
 794              	.LBB103:
 795              		.syntax unified
 796              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 797 0022 4FF05003 			mov r3, #80												
 798 0026 83F31188 		msr basepri, r3											
 799 002a BFF36F8F 		isb														
 800 002e BFF34F8F 		dsb														
 801              	
 802              	@ 0 "" 2
 803              	.LVL84:
 804              		.thumb
 805              		.syntax unified
 806              	.L71:
 807 0032 FEE7     		b	.L71
 808              	.LVL85:
 809              	.L72:
 810              	.LBE103:
 811              	.LBE102:
 731:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 812              		.loc 1 731 0
 813 0034 022B     		cmp	r3, #2
 814 0036 0BD1     		bne	.L74
 731:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 815              		.loc 1 731 0 is_stmt 0 discriminator 2
 816 0038 E26B     		ldr	r2, [r4, #60]
 817 003a 012A     		cmp	r2, #1
 818 003c 08D0     		beq	.L74
 819              	.LBB104:
 820              	.LBB105:
 821              		.loc 2 237 0 is_stmt 1
 822              		.syntax unified
 823              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 824 003e 4FF05003 			mov r3, #80												
 825 0042 83F31188 		msr basepri, r3											
 826 0046 BFF36F8F 		isb														
 827 004a BFF34F8F 		dsb														
 828              	
 829              	@ 0 "" 2
 830              	.LVL86:
 831              		.thumb
 832              		.syntax unified
 833              	.L75:
 834 004e FEE7     		b	.L75
 835              	.LVL87:
 836              	.L74:
 837 0050 1E46     		mov	r6, r3
 838 0052 0F46     		mov	r7, r1
 839              	.LBE105:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 56


 840              	.LBE104:
 734:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 841              		.loc 1 734 0
 842 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 843              	.LVL88:
 844 0058 50B9     		cbnz	r0, .L91
 734:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 845              		.loc 1 734 0 is_stmt 0 discriminator 2
 846 005a 019B     		ldr	r3, [sp, #4]
 847 005c 53B1     		cbz	r3, .L92
 848              	.LBB106:
 849              	.LBB107:
 850              		.loc 2 237 0 is_stmt 1
 851              		.syntax unified
 852              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 853 005e 4FF05003 			mov r3, #80												
 854 0062 83F31188 		msr basepri, r3											
 855 0066 BFF36F8F 		isb														
 856 006a BFF34F8F 		dsb														
 857              	
 858              	@ 0 "" 2
 859              	.LVL89:
 860              		.thumb
 861              		.syntax unified
 862              	.L77:
 863 006e FEE7     		b	.L77
 864              	.L91:
 865              	.LBE107:
 866              	.LBE106:
 867 0070 0025     		movs	r5, #0
 868 0072 3AE0     		b	.L78
 869              	.L92:
 870 0074 0025     		movs	r5, #0
 871 0076 38E0     		b	.L78
 872              	.LVL90:
 873              	.L79:
 753:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 874              		.loc 1 753 0
 875 0078 3246     		mov	r2, r6
 876 007a 3946     		mov	r1, r7
 877 007c 2046     		mov	r0, r4
 878 007e FFF7FEFF 		bl	prvCopyDataToQueue
 879              	.LVL91:
 808:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 880              		.loc 1 808 0
 881 0082 636A     		ldr	r3, [r4, #36]
 882 0084 4BB9     		cbnz	r3, .L95
 823:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 883              		.loc 1 823 0
 884 0086 A8B1     		cbz	r0, .L82
 829:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 885              		.loc 1 829 0
 886 0088 3B4B     		ldr	r3, .L100
 887 008a 4FF08052 		mov	r2, #268435456
 888 008e 1A60     		str	r2, [r3]
 889              		.syntax unified
 890              	@ 829 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 57


 891 0090 BFF34F8F 		dsb
 892              	@ 0 "" 2
 893              	@ 829 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 894 0094 BFF36F8F 		isb
 895              	@ 0 "" 2
 896              		.thumb
 897              		.syntax unified
 898 0098 0CE0     		b	.L82
 899              	.L95:
 810:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 900              		.loc 1 810 0
 901 009a 04F12400 		add	r0, r4, #36
 902              	.LVL92:
 903 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 904              	.LVL93:
 905 00a2 38B1     		cbz	r0, .L82
 816:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 906              		.loc 1 816 0
 907 00a4 344B     		ldr	r3, .L100
 908 00a6 4FF08052 		mov	r2, #268435456
 909 00aa 1A60     		str	r2, [r3]
 910              		.syntax unified
 911              	@ 816 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 912 00ac BFF34F8F 		dsb
 913              	@ 0 "" 2
 914              	@ 816 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 915 00b0 BFF36F8F 		isb
 916              	@ 0 "" 2
 917              		.thumb
 918              		.syntax unified
 919              	.L82:
 838:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				return pdPASS;
 920              		.loc 1 838 0
 921 00b4 FFF7FEFF 		bl	vPortExitCritical
 922              	.LVL94:
 839:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 923              		.loc 1 839 0
 924 00b8 0120     		movs	r0, #1
 925              	.L69:
 918:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 926              		.loc 1 918 0
 927 00ba 05B0     		add	sp, sp, #20
 928              	.LCFI13:
 929              		.cfi_remember_state
 930              		.cfi_def_cfa_offset 20
 931              		@ sp needed
 932 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 933              	.LVL95:
 934              	.L96:
 935              	.LCFI14:
 936              		.cfi_restore_state
 847:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 937              		.loc 1 847 0
 938 00be FFF7FEFF 		bl	vPortExitCritical
 939              	.LVL96:
 852:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 940              		.loc 1 852 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 58


 941 00c2 0020     		movs	r0, #0
 942 00c4 F9E7     		b	.L69
 943              	.L97:
 858:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					xEntryTimeSet = pdTRUE;
 944              		.loc 1 858 0
 945 00c6 02A8     		add	r0, sp, #8
 946 00c8 FFF7FEFF 		bl	vTaskSetTimeOutState
 947              	.LVL97:
 859:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 948              		.loc 1 859 0
 949 00cc 0125     		movs	r5, #1
 950 00ce 19E0     		b	.L85
 951              	.LVL98:
 952              	.L98:
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 953              		.loc 1 874 0 discriminator 1
 954 00d0 0023     		movs	r3, #0
 955 00d2 84F84430 		strb	r3, [r4, #68]
 956 00d6 21E0     		b	.L86
 957              	.L99:
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 958              		.loc 1 874 0 is_stmt 0 discriminator 4
 959 00d8 0023     		movs	r3, #0
 960 00da 84F84530 		strb	r3, [r4, #69]
 961 00de 23E0     		b	.L87
 962              	.L89:
 904:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) xTaskResumeAll();
 963              		.loc 1 904 0 is_stmt 1
 964 00e0 2046     		mov	r0, r4
 965 00e2 FFF7FEFF 		bl	prvUnlockQueue
 966              	.LVL99:
 905:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 967              		.loc 1 905 0
 968 00e6 FFF7FEFF 		bl	xTaskResumeAll
 969              	.LVL100:
 970              	.L78:
 744:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 971              		.loc 1 744 0
 972 00ea FFF7FEFF 		bl	vPortEnterCritical
 973              	.LVL101:
 750:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 974              		.loc 1 750 0
 975 00ee A26B     		ldr	r2, [r4, #56]
 976 00f0 E36B     		ldr	r3, [r4, #60]
 977 00f2 9A42     		cmp	r2, r3
 978 00f4 C0D3     		bcc	.L79
 750:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 979              		.loc 1 750 0 is_stmt 0 discriminator 1
 980 00f6 022E     		cmp	r6, #2
 981 00f8 BED0     		beq	.L79
 843:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 982              		.loc 1 843 0 is_stmt 1
 983 00fa 019B     		ldr	r3, [sp, #4]
 984 00fc 002B     		cmp	r3, #0
 985 00fe DED0     		beq	.L96
 854:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 986              		.loc 1 854 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 59


 987 0100 002D     		cmp	r5, #0
 988 0102 E0D0     		beq	.L97
 989              	.LVL102:
 990              	.L85:
 868:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 991              		.loc 1 868 0
 992 0104 FFF7FEFF 		bl	vPortExitCritical
 993              	.LVL103:
 873:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvLockQueue( pxQueue );
 994              		.loc 1 873 0
 995 0108 FFF7FEFF 		bl	vTaskSuspendAll
 996              	.LVL104:
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 997              		.loc 1 874 0
 998 010c FFF7FEFF 		bl	vPortEnterCritical
 999              	.LVL105:
 1000 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1001 0114 5BB2     		sxtb	r3, r3
 1002 0116 B3F1FF3F 		cmp	r3, #-1
 1003 011a D9D0     		beq	.L98
 1004              	.L86:
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1005              		.loc 1 874 0 is_stmt 0 discriminator 3
 1006 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1007 0120 5BB2     		sxtb	r3, r3
 1008 0122 B3F1FF3F 		cmp	r3, #-1
 1009 0126 D7D0     		beq	.L99
 1010              	.L87:
 874:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1011              		.loc 1 874 0 discriminator 6
 1012 0128 FFF7FEFF 		bl	vPortExitCritical
 1013              	.LVL106:
 877:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1014              		.loc 1 877 0 is_stmt 1 discriminator 6
 1015 012c 01A9     		add	r1, sp, #4
 1016 012e 02A8     		add	r0, sp, #8
 1017 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1018              	.LVL107:
 1019 0134 C8B9     		cbnz	r0, .L88
 879:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1020              		.loc 1 879 0
 1021 0136 2046     		mov	r0, r4
 1022 0138 FFF7FEFF 		bl	prvIsQueueFull
 1023              	.LVL108:
 1024 013c 0028     		cmp	r0, #0
 1025 013e CFD0     		beq	.L89
 882:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1026              		.loc 1 882 0
 1027 0140 0199     		ldr	r1, [sp, #4]
 1028 0142 04F11000 		add	r0, r4, #16
 1029 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1030              	.LVL109:
 889:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1031              		.loc 1 889 0
 1032 014a 2046     		mov	r0, r4
 1033 014c FFF7FEFF 		bl	prvUnlockQueue
 1034              	.LVL110:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 60


 896:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 1035              		.loc 1 896 0
 1036 0150 FFF7FEFF 		bl	xTaskResumeAll
 1037              	.LVL111:
 1038 0154 0028     		cmp	r0, #0
 1039 0156 C8D1     		bne	.L78
 898:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 1040              		.loc 1 898 0
 1041 0158 074B     		ldr	r3, .L100
 1042 015a 4FF08052 		mov	r2, #268435456
 1043 015e 1A60     		str	r2, [r3]
 1044              		.syntax unified
 1045              	@ 898 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1046 0160 BFF34F8F 		dsb
 1047              	@ 0 "" 2
 1048              	@ 898 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1049 0164 BFF36F8F 		isb
 1050              	@ 0 "" 2
 1051              		.thumb
 1052              		.syntax unified
 1053 0168 BFE7     		b	.L78
 1054              	.L88:
 911:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) xTaskResumeAll();
 1055              		.loc 1 911 0
 1056 016a 2046     		mov	r0, r4
 1057 016c FFF7FEFF 		bl	prvUnlockQueue
 1058              	.LVL112:
 912:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1059              		.loc 1 912 0
 1060 0170 FFF7FEFF 		bl	xTaskResumeAll
 1061              	.LVL113:
 915:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1062              		.loc 1 915 0
 1063 0174 0020     		movs	r0, #0
 1064 0176 A0E7     		b	.L69
 1065              	.L101:
 1066              		.align	2
 1067              	.L100:
 1068 0178 04ED00E0 		.word	-536810236
 1069              		.cfi_endproc
 1070              	.LFE10:
 1072              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1073              		.align	1
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	prvInitialiseMutex:
 1080              	.LFB8:
 477:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxNewQueue != NULL )
 1081              		.loc 1 477 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              	.LVL114:
 478:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1086              		.loc 1 478 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 61


 1087 0000 48B1     		cbz	r0, .L105
 477:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxNewQueue != NULL )
 1088              		.loc 1 477 0
 1089 0002 08B5     		push	{r3, lr}
 1090              	.LCFI15:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 3, -8
 1093              		.cfi_offset 14, -4
 484:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1094              		.loc 1 484 0
 1095 0004 0021     		movs	r1, #0
 1096 0006 4160     		str	r1, [r0, #4]
 485:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1097              		.loc 1 485 0
 1098 0008 0160     		str	r1, [r0]
 488:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1099              		.loc 1 488 0
 1100 000a C160     		str	r1, [r0, #12]
 493:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1101              		.loc 1 493 0
 1102 000c 0B46     		mov	r3, r1
 1103 000e 0A46     		mov	r2, r1
 1104 0010 FFF7FEFF 		bl	xQueueGenericSend
 1105              	.LVL115:
 499:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1106              		.loc 1 499 0
 1107 0014 08BD     		pop	{r3, pc}
 1108              	.LVL116:
 1109              	.L105:
 1110              	.LCFI16:
 1111              		.cfi_def_cfa_offset 0
 1112              		.cfi_restore 3
 1113              		.cfi_restore 14
 1114 0016 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE8:
 1118              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 1119              		.align	1
 1120              		.global	xQueueCreateMutexStatic
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1124              		.fpu fpv4-sp-d16
 1126              	xQueueCreateMutexStatic:
 1127              	.LFB9:
 523:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t *pxNewQueue;
 1128              		.loc 1 523 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              	.LVL117:
 1133 0000 10B5     		push	{r4, lr}
 1134              	.LCFI17:
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 4, -8
 1137              		.cfi_offset 14, -4
 1138 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 62


 1139              	.LCFI18:
 1140              		.cfi_def_cfa_offset 16
 1141              	.LVL118:
 531:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1142              		.loc 1 531 0
 1143 0004 0090     		str	r0, [sp]
 1144 0006 0B46     		mov	r3, r1
 1145 0008 0022     		movs	r2, #0
 1146 000a 1146     		mov	r1, r2
 1147              	.LVL119:
 1148 000c 0120     		movs	r0, #1
 1149              	.LVL120:
 1150 000e FFF7FEFF 		bl	xQueueGenericCreateStatic
 1151              	.LVL121:
 1152 0012 0446     		mov	r4, r0
 1153              	.LVL122:
 532:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1154              		.loc 1 532 0
 1155 0014 FFF7FEFF 		bl	prvInitialiseMutex
 1156              	.LVL123:
 535:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1157              		.loc 1 535 0
 1158 0018 2046     		mov	r0, r4
 1159 001a 02B0     		add	sp, sp, #8
 1160              	.LCFI19:
 1161              		.cfi_def_cfa_offset 8
 1162              		@ sp needed
 1163 001c 10BD     		pop	{r4, pc}
 1164              		.cfi_endproc
 1165              	.LFE9:
 1167              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1168              		.align	1
 1169              		.global	xQueueGenericSendFromISR
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1173              		.fpu fpv4-sp-d16
 1175              	xQueueGenericSendFromISR:
 1176              	.LFB11:
 922:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 1177              		.loc 1 922 0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 1181              	.LVL124:
 1182 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1183              	.LCFI20:
 1184              		.cfi_def_cfa_offset 32
 1185              		.cfi_offset 3, -32
 1186              		.cfi_offset 4, -28
 1187              		.cfi_offset 5, -24
 1188              		.cfi_offset 6, -20
 1189              		.cfi_offset 7, -16
 1190              		.cfi_offset 8, -12
 1191              		.cfi_offset 9, -8
 1192              		.cfi_offset 14, -4
 1193              	.LVL125:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 63


 927:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1194              		.loc 1 927 0
 1195 0004 60B1     		cbz	r0, .L125
 1196 0006 0446     		mov	r4, r0
 928:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1197              		.loc 1 928 0
 1198 0008 99B9     		cbnz	r1, .L113
 928:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1199              		.loc 1 928 0 is_stmt 0 discriminator 2
 1200 000a 006C     		ldr	r0, [r0, #64]
 1201              	.LVL126:
 1202 000c 88B1     		cbz	r0, .L113
 1203              	.LBB108:
 1204              	.LBB109:
 1205              		.loc 2 237 0 is_stmt 1
 1206              		.syntax unified
 1207              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1208 000e 4FF05003 			mov r3, #80												
 1209 0012 83F31188 		msr basepri, r3											
 1210 0016 BFF36F8F 		isb														
 1211 001a BFF34F8F 		dsb														
 1212              	
 1213              	@ 0 "" 2
 1214              	.LVL127:
 1215              		.thumb
 1216              		.syntax unified
 1217              	.L114:
 1218 001e FEE7     		b	.L114
 1219              	.LVL128:
 1220              	.L125:
 1221              	.LBE109:
 1222              	.LBE108:
 1223              	.LBB110:
 1224              	.LBB111:
 1225              		.syntax unified
 1226              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1227 0020 4FF05003 			mov r3, #80												
 1228 0024 83F31188 		msr basepri, r3											
 1229 0028 BFF36F8F 		isb														
 1230 002c BFF34F8F 		dsb														
 1231              	
 1232              	@ 0 "" 2
 1233              	.LVL129:
 1234              		.thumb
 1235              		.syntax unified
 1236              	.L112:
 1237 0030 FEE7     		b	.L112
 1238              	.LVL130:
 1239              	.L113:
 1240              	.LBE111:
 1241              	.LBE110:
 929:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1242              		.loc 1 929 0
 1243 0032 022B     		cmp	r3, #2
 1244 0034 0BD1     		bne	.L115
 929:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1245              		.loc 1 929 0 is_stmt 0 discriminator 2
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 64


 1246 0036 E06B     		ldr	r0, [r4, #60]
 1247 0038 0128     		cmp	r0, #1
 1248 003a 08D0     		beq	.L115
 1249              	.LBB112:
 1250              	.LBB113:
 1251              		.loc 2 237 0 is_stmt 1
 1252              		.syntax unified
 1253              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1254 003c 4FF05003 			mov r3, #80												
 1255 0040 83F31188 		msr basepri, r3											
 1256 0044 BFF36F8F 		isb														
 1257 0048 BFF34F8F 		dsb														
 1258              	
 1259              	@ 0 "" 2
 1260              	.LVL131:
 1261              		.thumb
 1262              		.syntax unified
 1263              	.L116:
 1264 004c FEE7     		b	.L116
 1265              	.LVL132:
 1266              	.L115:
 1267 004e 1F46     		mov	r7, r3
 1268 0050 9046     		mov	r8, r2
 1269 0052 8946     		mov	r9, r1
 1270              	.LBE113:
 1271              	.LBE112:
 945:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1272              		.loc 1 945 0
 1273 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1274              	.LVL133:
 1275              	.LBB114:
 1276              	.LBB115:
 238:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 239:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mov %0, %1												\n"	\
 240:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	msr basepri, %0											\n" \
 241:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	isb														\n" \
 242:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	dsb														\n" \
 243:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	);
 245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 246:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 247:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 249:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 251:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 1277              		.loc 2 253 0
 1278              		.syntax unified
 1279              	@ 253 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1280 0058 EFF31186 			mrs r6, basepri											
 1281 005c 4FF05003 		mov r3, #80												
 1282 0060 83F31188 		msr basepri, r3											
 1283 0064 BFF36F8F 		isb														
 1284 0068 BFF34F8F 		dsb														
 1285              	
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 65


 1286              	@ 0 "" 2
 1287              		.thumb
 1288              		.syntax unified
 1289              	.LBE115:
 1290              	.LBE114:
 954:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1291              		.loc 1 954 0
 1292 006c A26B     		ldr	r2, [r4, #56]
 1293 006e E36B     		ldr	r3, [r4, #60]
 1294 0070 9A42     		cmp	r2, r3
 1295 0072 03D3     		bcc	.L117
 954:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1296              		.loc 1 954 0 is_stmt 0 discriminator 1
 1297 0074 022F     		cmp	r7, #2
 1298 0076 01D0     		beq	.L117
1063:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1299              		.loc 1 1063 0 is_stmt 1
 1300 0078 0020     		movs	r0, #0
 1301 007a 0FE0     		b	.L118
 1302              	.L117:
 1303              	.LBB116:
 956:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1304              		.loc 1 956 0
 1305 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1306 0080 6DB2     		sxtb	r5, r5
 1307              	.LVL134:
 965:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1308              		.loc 1 965 0
 1309 0082 3A46     		mov	r2, r7
 1310 0084 4946     		mov	r1, r9
 1311 0086 2046     		mov	r0, r4
 1312 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1313              	.LVL135:
 969:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1314              		.loc 1 969 0
 1315 008c B5F1FF3F 		cmp	r5, #-1
 1316 0090 08D0     		beq	.L126
1055:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 1317              		.loc 1 1055 0
 1318 0092 6B1C     		adds	r3, r5, #1
 1319 0094 5BB2     		sxtb	r3, r3
 1320 0096 84F84530 		strb	r3, [r4, #69]
1058:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1321              		.loc 1 1058 0
 1322 009a 0120     		movs	r0, #1
 1323              	.LVL136:
 1324              	.L118:
 1325              	.LBE116:
 1326              	.LBB117:
 1327              	.LBB118:
 254:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 255:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	mov %1, %2												\n"	\
 257:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	msr basepri, %1											\n" \
 258:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	isb														\n" \
 259:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		"	dsb														\n" \
 260:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 66


 261:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	);
 262:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 263:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	warnings. */
 265:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	return ulOriginalBASEPRI;
 266:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** }
 267:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** /*-----------------------------------------------------------*/
 268:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 
 269:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** {
 271:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	__asm volatile
 1328              		.loc 2 271 0
 1329              		.syntax unified
 1330              	@ 271 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1331 009c 86F31188 			msr basepri, r6	
 1332              	@ 0 "" 2
 1333              	.LVL137:
 1334              		.thumb
 1335              		.syntax unified
 1336              	.LBE118:
 1337              	.LBE117:
1069:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 1338              		.loc 1 1069 0
 1339 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1340              	.LVL138:
 1341              	.L126:
 1342              	.LBB119:
1024:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 1343              		.loc 1 1024 0
 1344 00a4 636A     		ldr	r3, [r4, #36]
 1345 00a6 5BB1     		cbz	r3, .L121
1026:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1346              		.loc 1 1026 0
 1347 00a8 04F12400 		add	r0, r4, #36
 1348 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1349              	.LVL139:
 1350 00b0 40B1     		cbz	r0, .L122
1030:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 1351              		.loc 1 1030 0
 1352 00b2 B8F1000F 		cmp	r8, #0
 1353 00b6 07D0     		beq	.L123
1032:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 1354              		.loc 1 1032 0
 1355 00b8 0120     		movs	r0, #1
 1356 00ba C8F80000 		str	r0, [r8]
 1357 00be EDE7     		b	.L118
 1358              	.L121:
1058:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1359              		.loc 1 1058 0
 1360 00c0 0120     		movs	r0, #1
 1361 00c2 EBE7     		b	.L118
 1362              	.L122:
 1363 00c4 0120     		movs	r0, #1
 1364 00c6 E9E7     		b	.L118
 1365              	.L123:
 1366 00c8 0120     		movs	r0, #1
 1367 00ca E7E7     		b	.L118
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 67


 1368              	.LBE119:
 1369              		.cfi_endproc
 1370              	.LFE11:
 1372              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1373              		.align	1
 1374              		.global	xQueueGiveFromISR
 1375              		.syntax unified
 1376              		.thumb
 1377              		.thumb_func
 1378              		.fpu fpv4-sp-d16
 1380              	xQueueGiveFromISR:
 1381              	.LFB12:
1073:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 1382              		.loc 1 1073 0
 1383              		.cfi_startproc
 1384              		@ args = 0, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 1386              	.LVL140:
1084:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1387              		.loc 1 1084 0
 1388 0000 60B1     		cbz	r0, .L142
1073:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 1389              		.loc 1 1073 0
 1390 0002 70B5     		push	{r4, r5, r6, lr}
 1391              	.LCFI21:
 1392              		.cfi_def_cfa_offset 16
 1393              		.cfi_offset 4, -16
 1394              		.cfi_offset 5, -12
 1395              		.cfi_offset 6, -8
 1396              		.cfi_offset 14, -4
 1397 0004 0446     		mov	r4, r0
1088:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1398              		.loc 1 1088 0
 1399 0006 036C     		ldr	r3, [r0, #64]
 1400 0008 8BB1     		cbz	r3, .L130
 1401              	.LBB120:
 1402              	.LBB121:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1403              		.loc 2 237 0
 1404              		.syntax unified
 1405              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1406 000a 4FF05003 			mov r3, #80												
 1407 000e 83F31188 		msr basepri, r3											
 1408 0012 BFF36F8F 		isb														
 1409 0016 BFF34F8F 		dsb														
 1410              	
 1411              	@ 0 "" 2
 1412              	.LVL141:
 1413              		.thumb
 1414              		.syntax unified
 1415              	.L131:
 1416 001a FEE7     		b	.L131
 1417              	.L142:
 1418              	.LCFI22:
 1419              		.cfi_def_cfa_offset 0
 1420              		.cfi_restore 4
 1421              		.cfi_restore 5
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 68


 1422              		.cfi_restore 6
 1423              		.cfi_restore 14
 1424              	.LBE121:
 1425              	.LBE120:
 1426              	.LBB122:
 1427              	.LBB123:
 1428              		.syntax unified
 1429              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1430 001c 4FF05003 			mov r3, #80												
 1431 0020 83F31188 		msr basepri, r3											
 1432 0024 BFF36F8F 		isb														
 1433 0028 BFF34F8F 		dsb														
 1434              	
 1435              	@ 0 "" 2
 1436              	.LVL142:
 1437              		.thumb
 1438              		.syntax unified
 1439              	.L129:
 1440 002c FEE7     		b	.L129
 1441              	.L130:
 1442              	.LCFI23:
 1443              		.cfi_def_cfa_offset 16
 1444              		.cfi_offset 4, -16
 1445              		.cfi_offset 5, -12
 1446              		.cfi_offset 6, -8
 1447              		.cfi_offset 14, -4
 1448              	.LBE123:
 1449              	.LBE122:
1093:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1450              		.loc 1 1093 0
 1451 002e 0368     		ldr	r3, [r0]
 1452 0030 2BB3     		cbz	r3, .L143
 1453              	.L132:
 1454 0032 0E46     		mov	r6, r1
1109:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1455              		.loc 1 1109 0
 1456 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1457              	.LVL143:
 1458              	.LBB124:
 1459              	.LBB125:
 253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1460              		.loc 2 253 0
 1461              		.syntax unified
 1462              	@ 253 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1463 0038 EFF31185 			mrs r5, basepri											
 1464 003c 4FF05003 		mov r3, #80												
 1465 0040 83F31188 		msr basepri, r3											
 1466 0044 BFF36F8F 		isb														
 1467 0048 BFF34F8F 		dsb														
 1468              	
 1469              	@ 0 "" 2
 1470              		.thumb
 1471              		.syntax unified
 1472              	.LBE125:
 1473              	.LBE124:
 1474              	.LBB126:
1113:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 69


 1475              		.loc 1 1113 0
 1476 004c A26B     		ldr	r2, [r4, #56]
 1477              	.LVL144:
1118:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1478              		.loc 1 1118 0
 1479 004e E36B     		ldr	r3, [r4, #60]
 1480 0050 9342     		cmp	r3, r2
 1481 0052 26D9     		bls	.L136
 1482              	.LBB127:
1120:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1483              		.loc 1 1120 0
 1484 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1485 0058 5BB2     		sxtb	r3, r3
 1486              	.LVL145:
1130:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1487              		.loc 1 1130 0
 1488 005a 0132     		adds	r2, r2, #1
 1489              	.LVL146:
 1490 005c A263     		str	r2, [r4, #56]
1134:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1491              		.loc 1 1134 0
 1492 005e B3F1FF3F 		cmp	r3, #-1
 1493 0062 18D1     		bne	.L135
1189:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 1494              		.loc 1 1189 0
 1495 0064 636A     		ldr	r3, [r4, #36]
 1496              	.LVL147:
 1497 0066 F3B1     		cbz	r3, .L137
1191:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1498              		.loc 1 1191 0
 1499 0068 04F12400 		add	r0, r4, #36
 1500 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1501              	.LVL148:
 1502 0070 D8B1     		cbz	r0, .L138
1195:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							{
 1503              		.loc 1 1195 0
 1504 0072 E6B1     		cbz	r6, .L139
1197:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 							}
 1505              		.loc 1 1197 0
 1506 0074 0120     		movs	r0, #1
 1507 0076 3060     		str	r0, [r6]
 1508              	.L134:
 1509              	.LVL149:
 1510              	.LBE127:
 1511              	.LBE126:
 1512              	.LBB130:
 1513              	.LBB131:
 1514              		.loc 2 271 0
 1515              		.syntax unified
 1516              	@ 271 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1517 0078 85F31188 			msr basepri, r5	
 1518              	@ 0 "" 2
 1519              	.LVL150:
 1520              		.thumb
 1521              		.syntax unified
 1522              	.LBE131:
 1523              	.LBE130:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 70


1234:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 1524              		.loc 1 1234 0
 1525 007c 70BD     		pop	{r4, r5, r6, pc}
 1526              	.LVL151:
 1527              	.L143:
1093:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1528              		.loc 1 1093 0 discriminator 2
 1529 007e 4368     		ldr	r3, [r0, #4]
 1530 0080 002B     		cmp	r3, #0
 1531 0082 D6D0     		beq	.L132
 1532              	.LBB132:
 1533              	.LBB133:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1534              		.loc 2 237 0
 1535              		.syntax unified
 1536              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1537 0084 4FF05003 			mov r3, #80												
 1538 0088 83F31188 		msr basepri, r3											
 1539 008c BFF36F8F 		isb														
 1540 0090 BFF34F8F 		dsb														
 1541              	
 1542              	@ 0 "" 2
 1543              	.LVL152:
 1544              		.thumb
 1545              		.syntax unified
 1546              	.L133:
 1547 0094 FEE7     		b	.L133
 1548              	.LVL153:
 1549              	.L135:
 1550              	.LBE133:
 1551              	.LBE132:
 1552              	.LBB134:
 1553              	.LBB128:
1220:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 1554              		.loc 1 1220 0
 1555 0096 0133     		adds	r3, r3, #1
 1556              	.LVL154:
 1557 0098 5BB2     		sxtb	r3, r3
 1558              	.LVL155:
 1559 009a 84F84530 		strb	r3, [r4, #69]
1223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1560              		.loc 1 1223 0
 1561 009e 0120     		movs	r0, #1
 1562 00a0 EAE7     		b	.L134
 1563              	.LVL156:
 1564              	.L136:
 1565              	.LBE128:
1228:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1566              		.loc 1 1228 0
 1567 00a2 0020     		movs	r0, #0
 1568 00a4 E8E7     		b	.L134
 1569              	.LVL157:
 1570              	.L137:
 1571              	.LBB129:
1223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 1572              		.loc 1 1223 0
 1573 00a6 0120     		movs	r0, #1
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 71


 1574 00a8 E6E7     		b	.L134
 1575              	.LVL158:
 1576              	.L138:
 1577 00aa 0120     		movs	r0, #1
 1578 00ac E4E7     		b	.L134
 1579              	.L139:
 1580 00ae 0120     		movs	r0, #1
 1581 00b0 E2E7     		b	.L134
 1582              	.LBE129:
 1583              	.LBE134:
 1584              		.cfi_endproc
 1585              	.LFE12:
 1587              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1588              		.align	1
 1589              		.global	xQueueGenericReceive
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu fpv4-sp-d16
 1595              	xQueueGenericReceive:
 1596              	.LFB13:
1238:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1597              		.loc 1 1238 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 16
 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601              	.LVL159:
 1602 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1603              	.LCFI24:
 1604              		.cfi_def_cfa_offset 24
 1605              		.cfi_offset 4, -24
 1606              		.cfi_offset 5, -20
 1607              		.cfi_offset 6, -16
 1608              		.cfi_offset 7, -12
 1609              		.cfi_offset 8, -8
 1610              		.cfi_offset 14, -4
 1611 0004 84B0     		sub	sp, sp, #16
 1612              	.LCFI25:
 1613              		.cfi_def_cfa_offset 40
 1614 0006 0192     		str	r2, [sp, #4]
 1615              	.LVL160:
1244:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1616              		.loc 1 1244 0
 1617 0008 60B1     		cbz	r0, .L168
 1618 000a 0446     		mov	r4, r0
1245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1619              		.loc 1 1245 0
 1620 000c 99B9     		cbnz	r1, .L147
1245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1621              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1622 000e 026C     		ldr	r2, [r0, #64]
 1623              	.LVL161:
 1624 0010 8AB1     		cbz	r2, .L147
 1625              	.LBB135:
 1626              	.LBB136:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1627              		.loc 2 237 0 is_stmt 1
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 72


 1628              		.syntax unified
 1629              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1630 0012 4FF05003 			mov r3, #80												
 1631 0016 83F31188 		msr basepri, r3											
 1632 001a BFF36F8F 		isb														
 1633 001e BFF34F8F 		dsb														
 1634              	
 1635              	@ 0 "" 2
 1636              	.LVL162:
 1637              		.thumb
 1638              		.syntax unified
 1639              	.L148:
 1640 0022 FEE7     		b	.L148
 1641              	.LVL163:
 1642              	.L168:
 1643              	.LBE136:
 1644              	.LBE135:
 1645              	.LBB137:
 1646              	.LBB138:
 1647              		.syntax unified
 1648              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1649 0024 4FF05003 			mov r3, #80												
 1650 0028 83F31188 		msr basepri, r3											
 1651 002c BFF36F8F 		isb														
 1652 0030 BFF34F8F 		dsb														
 1653              	
 1654              	@ 0 "" 2
 1655              	.LVL164:
 1656              		.thumb
 1657              		.syntax unified
 1658              	.L146:
 1659 0034 FEE7     		b	.L146
 1660              	.LVL165:
 1661              	.L147:
 1662 0036 1F46     		mov	r7, r3
 1663 0038 8846     		mov	r8, r1
 1664              	.LBE138:
 1665              	.LBE137:
1248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 1666              		.loc 1 1248 0
 1667 003a FFF7FEFF 		bl	xTaskGetSchedulerState
 1668              	.LVL166:
 1669 003e 50B9     		cbnz	r0, .L165
1248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 1670              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1671 0040 019B     		ldr	r3, [sp, #4]
 1672 0042 53B1     		cbz	r3, .L166
 1673              	.LBB139:
 1674              	.LBB140:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1675              		.loc 2 237 0 is_stmt 1
 1676              		.syntax unified
 1677              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1678 0044 4FF05003 			mov r3, #80												
 1679 0048 83F31188 		msr basepri, r3											
 1680 004c BFF36F8F 		isb														
 1681 0050 BFF34F8F 		dsb														
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 73


 1682              	
 1683              	@ 0 "" 2
 1684              	.LVL167:
 1685              		.thumb
 1686              		.syntax unified
 1687              	.L150:
 1688 0054 FEE7     		b	.L150
 1689              	.L165:
 1690              	.LBE140:
 1691              	.LBE139:
 1692 0056 0026     		movs	r6, #0
 1693 0058 5FE0     		b	.L151
 1694              	.L166:
 1695 005a 0026     		movs	r6, #0
 1696 005c 5DE0     		b	.L151
 1697              	.LVL168:
 1698              	.L170:
 1699              	.LBB141:
1268:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1700              		.loc 1 1268 0
 1701 005e E668     		ldr	r6, [r4, #12]
 1702              	.LVL169:
1270:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1703              		.loc 1 1270 0
 1704 0060 4146     		mov	r1, r8
 1705 0062 2046     		mov	r0, r4
 1706 0064 FFF7FEFF 		bl	prvCopyDataFromQueue
 1707              	.LVL170:
1272:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 1708              		.loc 1 1272 0
 1709 0068 DFB9     		cbnz	r7, .L153
1277:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1710              		.loc 1 1277 0
 1711 006a 013D     		subs	r5, r5, #1
 1712              	.LVL171:
 1713 006c A563     		str	r5, [r4, #56]
1281:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1714              		.loc 1 1281 0
 1715 006e 2368     		ldr	r3, [r4]
 1716 0070 13B9     		cbnz	r3, .L154
1285:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 1717              		.loc 1 1285 0
 1718 0072 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1719              	.LVL172:
 1720 0076 6060     		str	r0, [r4, #4]
 1721              	.L154:
1294:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 1722              		.loc 1 1294 0
 1723 0078 2369     		ldr	r3, [r4, #16]
 1724 007a 63B1     		cbz	r3, .L155
1296:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1725              		.loc 1 1296 0
 1726 007c 04F11000 		add	r0, r4, #16
 1727 0080 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1728              	.LVL173:
 1729 0084 38B1     		cbz	r0, .L155
1298:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 74


 1730              		.loc 1 1298 0
 1731 0086 464B     		ldr	r3, .L176
 1732 0088 4FF08052 		mov	r2, #268435456
 1733 008c 1A60     		str	r2, [r3]
 1734              		.syntax unified
 1735              	@ 1298 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1736 008e BFF34F8F 		dsb
 1737              	@ 0 "" 2
 1738              	@ 1298 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1739 0092 BFF36F8F 		isb
 1740              	@ 0 "" 2
 1741              	.LVL174:
 1742              		.thumb
 1743              		.syntax unified
 1744              	.L155:
1338:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				return pdPASS;
 1745              		.loc 1 1338 0
 1746 0096 FFF7FEFF 		bl	vPortExitCritical
 1747              	.LVL175:
1339:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 1748              		.loc 1 1339 0
 1749 009a 0120     		movs	r0, #1
 1750              	.LVL176:
 1751              	.L144:
 1752              	.LBE141:
1431:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 1753              		.loc 1 1431 0
 1754 009c 04B0     		add	sp, sp, #16
 1755              	.LCFI26:
 1756              		.cfi_remember_state
 1757              		.cfi_def_cfa_offset 24
 1758              		@ sp needed
 1759 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1760              	.LVL177:
 1761              	.L153:
 1762              	.LCFI27:
 1763              		.cfi_restore_state
 1764              	.LBB142:
1316:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1765              		.loc 1 1316 0
 1766 00a2 E660     		str	r6, [r4, #12]
1320:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 1767              		.loc 1 1320 0
 1768 00a4 636A     		ldr	r3, [r4, #36]
 1769 00a6 002B     		cmp	r3, #0
 1770 00a8 F5D0     		beq	.L155
1322:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1771              		.loc 1 1322 0
 1772 00aa 04F12400 		add	r0, r4, #36
 1773 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 1774              	.LVL178:
 1775 00b2 0028     		cmp	r0, #0
 1776 00b4 EFD0     		beq	.L155
1325:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 1777              		.loc 1 1325 0
 1778 00b6 3A4B     		ldr	r3, .L176
 1779 00b8 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 75


 1780 00bc 1A60     		str	r2, [r3]
 1781              		.syntax unified
 1782              	@ 1325 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1783 00be BFF34F8F 		dsb
 1784              	@ 0 "" 2
 1785              	@ 1325 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1786 00c2 BFF36F8F 		isb
 1787              	@ 0 "" 2
 1788              		.thumb
 1789              		.syntax unified
 1790 00c6 E6E7     		b	.L155
 1791              	.LVL179:
 1792              	.L171:
1347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1793              		.loc 1 1347 0
 1794 00c8 FFF7FEFF 		bl	vPortExitCritical
 1795              	.LVL180:
1349:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 1796              		.loc 1 1349 0
 1797 00cc 0020     		movs	r0, #0
 1798 00ce E5E7     		b	.L144
 1799              	.L172:
1355:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					xEntryTimeSet = pdTRUE;
 1800              		.loc 1 1355 0
 1801 00d0 02A8     		add	r0, sp, #8
 1802 00d2 FFF7FEFF 		bl	vTaskSetTimeOutState
 1803              	.LVL181:
1356:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 1804              		.loc 1 1356 0
 1805 00d6 0126     		movs	r6, #1
 1806 00d8 29E0     		b	.L158
 1807              	.LVL182:
 1808              	.L173:
 1809              	.LBE142:
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1810              		.loc 1 1371 0 discriminator 1
 1811 00da 0023     		movs	r3, #0
 1812 00dc 84F84430 		strb	r3, [r4, #68]
 1813 00e0 31E0     		b	.L159
 1814              	.L174:
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1815              		.loc 1 1371 0 is_stmt 0 discriminator 4
 1816 00e2 0023     		movs	r3, #0
 1817 00e4 84F84530 		strb	r3, [r4, #69]
 1818 00e8 33E0     		b	.L160
 1819              	.L175:
1384:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 1820              		.loc 1 1384 0 is_stmt 1
 1821 00ea FFF7FEFF 		bl	vPortEnterCritical
 1822              	.LVL183:
1386:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 1823              		.loc 1 1386 0
 1824 00ee 6068     		ldr	r0, [r4, #4]
 1825 00f0 FFF7FEFF 		bl	vTaskPriorityInherit
 1826              	.LVL184:
1388:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
 1827              		.loc 1 1388 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 76


 1828 00f4 FFF7FEFF 		bl	vPortExitCritical
 1829              	.LVL185:
 1830 00f8 3BE0     		b	.L163
 1831              	.L162:
1411:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) xTaskResumeAll();
 1832              		.loc 1 1411 0
 1833 00fa 2046     		mov	r0, r4
 1834 00fc FFF7FEFF 		bl	prvUnlockQueue
 1835              	.LVL186:
1412:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 1836              		.loc 1 1412 0
 1837 0100 FFF7FEFF 		bl	xTaskResumeAll
 1838              	.LVL187:
 1839 0104 09E0     		b	.L151
 1840              	.L161:
1417:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) xTaskResumeAll();
 1841              		.loc 1 1417 0
 1842 0106 2046     		mov	r0, r4
 1843 0108 FFF7FEFF 		bl	prvUnlockQueue
 1844              	.LVL188:
1418:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1845              		.loc 1 1418 0
 1846 010c FFF7FEFF 		bl	xTaskResumeAll
 1847              	.LVL189:
1420:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1848              		.loc 1 1420 0
 1849 0110 2046     		mov	r0, r4
 1850 0112 FFF7FEFF 		bl	prvIsQueueEmpty
 1851              	.LVL190:
 1852 0116 0028     		cmp	r0, #0
 1853 0118 40D1     		bne	.L169
 1854              	.LVL191:
 1855              	.L151:
1258:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1856              		.loc 1 1258 0
 1857 011a FFF7FEFF 		bl	vPortEnterCritical
 1858              	.LVL192:
 1859              	.LBB143:
1260:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1860              		.loc 1 1260 0
 1861 011e A56B     		ldr	r5, [r4, #56]
 1862              	.LVL193:
1264:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1863              		.loc 1 1264 0
 1864 0120 002D     		cmp	r5, #0
 1865 0122 9CD1     		bne	.L170
1343:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 1866              		.loc 1 1343 0
 1867 0124 019B     		ldr	r3, [sp, #4]
 1868 0126 002B     		cmp	r3, #0
 1869 0128 CED0     		beq	.L171
1351:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 1870              		.loc 1 1351 0
 1871 012a 002E     		cmp	r6, #0
 1872 012c D0D0     		beq	.L172
 1873              	.LVL194:
 1874              	.L158:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 77


 1875              	.LBE143:
1365:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1876              		.loc 1 1365 0
 1877 012e FFF7FEFF 		bl	vPortExitCritical
 1878              	.LVL195:
1370:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		prvLockQueue( pxQueue );
 1879              		.loc 1 1370 0
 1880 0132 FFF7FEFF 		bl	vTaskSuspendAll
 1881              	.LVL196:
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1882              		.loc 1 1371 0
 1883 0136 FFF7FEFF 		bl	vPortEnterCritical
 1884              	.LVL197:
 1885 013a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1886 013e 5BB2     		sxtb	r3, r3
 1887 0140 B3F1FF3F 		cmp	r3, #-1
 1888 0144 C9D0     		beq	.L173
 1889              	.L159:
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1890              		.loc 1 1371 0 is_stmt 0 discriminator 3
 1891 0146 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1892 014a 5BB2     		sxtb	r3, r3
 1893 014c B3F1FF3F 		cmp	r3, #-1
 1894 0150 C7D0     		beq	.L174
 1895              	.L160:
1371:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1896              		.loc 1 1371 0 discriminator 6
 1897 0152 FFF7FEFF 		bl	vPortExitCritical
 1898              	.LVL198:
1374:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 1899              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1900 0156 01A9     		add	r1, sp, #4
 1901 0158 02A8     		add	r0, sp, #8
 1902 015a FFF7FEFF 		bl	xTaskCheckForTimeOut
 1903              	.LVL199:
 1904 015e 0028     		cmp	r0, #0
 1905 0160 D1D1     		bne	.L161
1376:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 1906              		.loc 1 1376 0
 1907 0162 2046     		mov	r0, r4
 1908 0164 FFF7FEFF 		bl	prvIsQueueEmpty
 1909              	.LVL200:
 1910 0168 0028     		cmp	r0, #0
 1911 016a C6D0     		beq	.L162
1382:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 1912              		.loc 1 1382 0
 1913 016c 2368     		ldr	r3, [r4]
 1914 016e 002B     		cmp	r3, #0
 1915 0170 BBD0     		beq	.L175
 1916              	.L163:
1397:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvUnlockQueue( pxQueue );
 1917              		.loc 1 1397 0
 1918 0172 0199     		ldr	r1, [sp, #4]
 1919 0174 04F12400 		add	r0, r4, #36
 1920 0178 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1921              	.LVL201:
1398:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 78


 1922              		.loc 1 1398 0
 1923 017c 2046     		mov	r0, r4
 1924 017e FFF7FEFF 		bl	prvUnlockQueue
 1925              	.LVL202:
1399:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 1926              		.loc 1 1399 0
 1927 0182 FFF7FEFF 		bl	xTaskResumeAll
 1928              	.LVL203:
 1929 0186 0028     		cmp	r0, #0
 1930 0188 C7D1     		bne	.L151
1401:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
 1931              		.loc 1 1401 0
 1932 018a 054B     		ldr	r3, .L176
 1933 018c 4FF08052 		mov	r2, #268435456
 1934 0190 1A60     		str	r2, [r3]
 1935              		.syntax unified
 1936              	@ 1401 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1937 0192 BFF34F8F 		dsb
 1938              	@ 0 "" 2
 1939              	@ 1401 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTO
 1940 0196 BFF36F8F 		isb
 1941              	@ 0 "" 2
 1942              		.thumb
 1943              		.syntax unified
 1944 019a BEE7     		b	.L151
 1945              	.L169:
1423:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 1946              		.loc 1 1423 0
 1947 019c 0020     		movs	r0, #0
 1948 019e 7DE7     		b	.L144
 1949              	.L177:
 1950              		.align	2
 1951              	.L176:
 1952 01a0 04ED00E0 		.word	-536810236
 1953              		.cfi_endproc
 1954              	.LFE13:
 1956              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1957              		.align	1
 1958              		.global	xQueueReceiveFromISR
 1959              		.syntax unified
 1960              		.thumb
 1961              		.thumb_func
 1962              		.fpu fpv4-sp-d16
 1964              	xQueueReceiveFromISR:
 1965              	.LFB14:
1435:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 1966              		.loc 1 1435 0
 1967              		.cfi_startproc
 1968              		@ args = 0, pretend = 0, frame = 0
 1969              		@ frame_needed = 0, uses_anonymous_args = 0
 1970              	.LVL204:
 1971 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1972              	.LCFI28:
 1973              		.cfi_def_cfa_offset 32
 1974              		.cfi_offset 3, -32
 1975              		.cfi_offset 4, -28
 1976              		.cfi_offset 5, -24
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 79


 1977              		.cfi_offset 6, -20
 1978              		.cfi_offset 7, -16
 1979              		.cfi_offset 8, -12
 1980              		.cfi_offset 9, -8
 1981              		.cfi_offset 14, -4
 1982              	.LVL205:
1440:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1983              		.loc 1 1440 0
 1984 0004 60B1     		cbz	r0, .L190
 1985 0006 0446     		mov	r4, r0
1441:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1986              		.loc 1 1441 0
 1987 0008 99B9     		cbnz	r1, .L181
1441:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 1988              		.loc 1 1441 0 is_stmt 0 discriminator 2
 1989 000a 036C     		ldr	r3, [r0, #64]
 1990 000c 8BB1     		cbz	r3, .L181
 1991              	.LBB144:
 1992              	.LBB145:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 1993              		.loc 2 237 0 is_stmt 1
 1994              		.syntax unified
 1995              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 1996 000e 4FF05003 			mov r3, #80												
 1997 0012 83F31188 		msr basepri, r3											
 1998 0016 BFF36F8F 		isb														
 1999 001a BFF34F8F 		dsb														
 2000              	
 2001              	@ 0 "" 2
 2002              	.LVL206:
 2003              		.thumb
 2004              		.syntax unified
 2005              	.L182:
 2006 001e FEE7     		b	.L182
 2007              	.L190:
 2008              	.LBE145:
 2009              	.LBE144:
 2010              	.LBB146:
 2011              	.LBB147:
 2012              		.syntax unified
 2013              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2014 0020 4FF05003 			mov r3, #80												
 2015 0024 83F31188 		msr basepri, r3											
 2016 0028 BFF36F8F 		isb														
 2017 002c BFF34F8F 		dsb														
 2018              	
 2019              	@ 0 "" 2
 2020              	.LVL207:
 2021              		.thumb
 2022              		.syntax unified
 2023              	.L180:
 2024 0030 FEE7     		b	.L180
 2025              	.L181:
 2026 0032 1746     		mov	r7, r2
 2027 0034 8946     		mov	r9, r1
 2028              	.LBE147:
 2029              	.LBE146:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 80


1457:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2030              		.loc 1 1457 0
 2031 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2032              	.LVL208:
 2033              	.LBB148:
 2034              	.LBB149:
 253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2035              		.loc 2 253 0
 2036              		.syntax unified
 2037              	@ 253 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2038 003a EFF31186 			mrs r6, basepri											
 2039 003e 4FF05003 		mov r3, #80												
 2040 0042 83F31188 		msr basepri, r3											
 2041 0046 BFF36F8F 		isb														
 2042 004a BFF34F8F 		dsb														
 2043              	
 2044              	@ 0 "" 2
 2045              		.thumb
 2046              		.syntax unified
 2047              	.LBE149:
 2048              	.LBE148:
 2049              	.LBB150:
1461:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2050              		.loc 1 1461 0
 2051 004e D4F83880 		ldr	r8, [r4, #56]
 2052              	.LVL209:
1464:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 2053              		.loc 1 1464 0
 2054 0052 B8F1000F 		cmp	r8, #0
 2055 0056 1DD0     		beq	.L185
 2056              	.LBB151:
1466:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2057              		.loc 1 1466 0
 2058 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2059 005c 6DB2     		sxtb	r5, r5
 2060              	.LVL210:
1470:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 2061              		.loc 1 1470 0
 2062 005e 4946     		mov	r1, r9
 2063 0060 2046     		mov	r0, r4
 2064 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2065              	.LVL211:
1471:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2066              		.loc 1 1471 0
 2067 0066 08F1FF33 		add	r3, r8, #-1
 2068 006a A363     		str	r3, [r4, #56]
1477:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
 2069              		.loc 1 1477 0
 2070 006c B5F1FF3F 		cmp	r5, #-1
 2071 0070 05D0     		beq	.L191
1508:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
 2072              		.loc 1 1508 0
 2073 0072 6B1C     		adds	r3, r5, #1
 2074 0074 5BB2     		sxtb	r3, r3
 2075 0076 84F84430 		strb	r3, [r4, #68]
1511:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 2076              		.loc 1 1511 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 81


 2077 007a 0120     		movs	r0, #1
 2078 007c 0BE0     		b	.L183
 2079              	.L191:
1479:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
 2080              		.loc 1 1479 0
 2081 007e 2369     		ldr	r3, [r4, #16]
 2082 0080 6BB1     		cbz	r3, .L186
1481:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
 2083              		.loc 1 1481 0
 2084 0082 04F11000 		add	r0, r4, #16
 2085 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2086              	.LVL212:
 2087 008a 50B1     		cbz	r0, .L187
1485:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						{
 2088              		.loc 1 1485 0
 2089 008c 5FB1     		cbz	r7, .L188
1487:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						}
 2090              		.loc 1 1487 0
 2091 008e 0120     		movs	r0, #1
 2092 0090 3860     		str	r0, [r7]
 2093 0092 00E0     		b	.L183
 2094              	.LVL213:
 2095              	.L185:
 2096              	.LBE151:
1515:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2097              		.loc 1 1515 0
 2098 0094 0020     		movs	r0, #0
 2099              	.L183:
 2100              	.LVL214:
 2101              	.LBE150:
 2102              	.LBB153:
 2103              	.LBB154:
 2104              		.loc 2 271 0
 2105              		.syntax unified
 2106              	@ 271 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2107 0096 86F31188 			msr basepri, r6	
 2108              	@ 0 "" 2
 2109              	.LVL215:
 2110              		.thumb
 2111              		.syntax unified
 2112              	.LBE154:
 2113              	.LBE153:
1522:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2114              		.loc 1 1522 0
 2115 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2116              	.LVL216:
 2117              	.L186:
 2118              	.LBB155:
 2119              	.LBB152:
1511:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 2120              		.loc 1 1511 0
 2121 009e 0120     		movs	r0, #1
 2122 00a0 F9E7     		b	.L183
 2123              	.L187:
 2124 00a2 0120     		movs	r0, #1
 2125 00a4 F7E7     		b	.L183
 2126              	.L188:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 82


 2127 00a6 0120     		movs	r0, #1
 2128 00a8 F5E7     		b	.L183
 2129              	.LBE152:
 2130              	.LBE155:
 2131              		.cfi_endproc
 2132              	.LFE14:
 2134              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2135              		.align	1
 2136              		.global	xQueuePeekFromISR
 2137              		.syntax unified
 2138              		.thumb
 2139              		.thumb_func
 2140              		.fpu fpv4-sp-d16
 2142              	xQueuePeekFromISR:
 2143              	.LFB15:
1526:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 2144              		.loc 1 1526 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              	.LVL217:
 2149 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2150              	.LCFI29:
 2151              		.cfi_def_cfa_offset 24
 2152              		.cfi_offset 3, -24
 2153              		.cfi_offset 4, -20
 2154              		.cfi_offset 5, -16
 2155              		.cfi_offset 6, -12
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158              	.LVL218:
1532:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2159              		.loc 1 1532 0
 2160 0002 60B1     		cbz	r0, .L202
 2161 0004 0446     		mov	r4, r0
1533:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2162              		.loc 1 1533 0
 2163 0006 99B9     		cbnz	r1, .L195
1533:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2164              		.loc 1 1533 0 is_stmt 0 discriminator 2
 2165 0008 036C     		ldr	r3, [r0, #64]
 2166 000a 8BB1     		cbz	r3, .L195
 2167              	.LBB156:
 2168              	.LBB157:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2169              		.loc 2 237 0 is_stmt 1
 2170              		.syntax unified
 2171              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2172 000c 4FF05003 			mov r3, #80												
 2173 0010 83F31188 		msr basepri, r3											
 2174 0014 BFF36F8F 		isb														
 2175 0018 BFF34F8F 		dsb														
 2176              	
 2177              	@ 0 "" 2
 2178              	.LVL219:
 2179              		.thumb
 2180              		.syntax unified
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 83


 2181              	.L196:
 2182 001c FEE7     		b	.L196
 2183              	.L202:
 2184              	.LBE157:
 2185              	.LBE156:
 2186              	.LBB158:
 2187              	.LBB159:
 2188              		.syntax unified
 2189              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2190 001e 4FF05003 			mov r3, #80												
 2191 0022 83F31188 		msr basepri, r3											
 2192 0026 BFF36F8F 		isb														
 2193 002a BFF34F8F 		dsb														
 2194              	
 2195              	@ 0 "" 2
 2196              	.LVL220:
 2197              		.thumb
 2198              		.syntax unified
 2199              	.L194:
 2200 002e FEE7     		b	.L194
 2201              	.L195:
 2202              	.LBE159:
 2203              	.LBE158:
1534:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2204              		.loc 1 1534 0
 2205 0030 236C     		ldr	r3, [r4, #64]
 2206 0032 43B9     		cbnz	r3, .L197
 2207              	.LBB160:
 2208              	.LBB161:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2209              		.loc 2 237 0
 2210              		.syntax unified
 2211              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2212 0034 4FF05003 			mov r3, #80												
 2213 0038 83F31188 		msr basepri, r3											
 2214 003c BFF36F8F 		isb														
 2215 0040 BFF34F8F 		dsb														
 2216              	
 2217              	@ 0 "" 2
 2218              	.LVL221:
 2219              		.thumb
 2220              		.syntax unified
 2221              	.L198:
 2222 0044 FEE7     		b	.L198
 2223              	.L197:
 2224 0046 0D46     		mov	r5, r1
 2225              	.LBE161:
 2226              	.LBE160:
1550:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2227              		.loc 1 1550 0
 2228 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2229              	.LVL222:
 2230              	.LBB162:
 2231              	.LBB163:
 253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2232              		.loc 2 253 0
 2233              		.syntax unified
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 84


 2234              	@ 253 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2235 004c EFF31186 			mrs r6, basepri											
 2236 0050 4FF05003 		mov r3, #80												
 2237 0054 83F31188 		msr basepri, r3											
 2238 0058 BFF36F8F 		isb														
 2239 005c BFF34F8F 		dsb														
 2240              	
 2241              	@ 0 "" 2
 2242              		.thumb
 2243              		.syntax unified
 2244              	.LBE163:
 2245              	.LBE162:
1555:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 2246              		.loc 1 1555 0
 2247 0060 A36B     		ldr	r3, [r4, #56]
 2248 0062 4BB1     		cbz	r3, .L200
1561:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2249              		.loc 1 1561 0
 2250 0064 E768     		ldr	r7, [r4, #12]
 2251              	.LVL223:
1562:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2252              		.loc 1 1562 0
 2253 0066 2946     		mov	r1, r5
 2254 0068 2046     		mov	r0, r4
 2255 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 2256              	.LVL224:
1563:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2257              		.loc 1 1563 0
 2258 006e E760     		str	r7, [r4, #12]
 2259              	.LVL225:
1565:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
 2260              		.loc 1 1565 0
 2261 0070 0120     		movs	r0, #1
 2262              	.LVL226:
 2263              	.L199:
 2264              	.LBB164:
 2265              	.LBB165:
 2266              		.loc 2 271 0
 2267              		.syntax unified
 2268              	@ 271 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2269 0072 86F31188 			msr basepri, r6	
 2270              	@ 0 "" 2
 2271              	.LVL227:
 2272              		.thumb
 2273              		.syntax unified
 2274              	.LBE165:
 2275              	.LBE164:
1576:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2276              		.loc 1 1576 0
 2277 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2278              	.LVL228:
 2279              	.L200:
1569:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2280              		.loc 1 1569 0
 2281 0078 0020     		movs	r0, #0
 2282 007a FAE7     		b	.L199
 2283              		.cfi_endproc
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 85


 2284              	.LFE15:
 2286              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2287              		.align	1
 2288              		.global	uxQueueMessagesWaiting
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2292              		.fpu fpv4-sp-d16
 2294              	uxQueueMessagesWaiting:
 2295              	.LFB16:
1580:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
 2296              		.loc 1 1580 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL229:
1583:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2301              		.loc 1 1583 0
 2302 0000 40B9     		cbnz	r0, .L204
 2303              	.LBB166:
 2304              	.LBB167:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2305              		.loc 2 237 0
 2306              		.syntax unified
 2307              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2308 0002 4FF05003 			mov r3, #80												
 2309 0006 83F31188 		msr basepri, r3											
 2310 000a BFF36F8F 		isb														
 2311 000e BFF34F8F 		dsb														
 2312              	
 2313              	@ 0 "" 2
 2314              	.LVL230:
 2315              		.thumb
 2316              		.syntax unified
 2317              	.L205:
 2318 0012 FEE7     		b	.L205
 2319              	.L204:
 2320              	.LBE167:
 2321              	.LBE166:
1580:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
 2322              		.loc 1 1580 0
 2323 0014 10B5     		push	{r4, lr}
 2324              	.LCFI30:
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 4, -8
 2327              		.cfi_offset 14, -4
 2328 0016 0446     		mov	r4, r0
1585:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2329              		.loc 1 1585 0
 2330 0018 FFF7FEFF 		bl	vPortEnterCritical
 2331              	.LVL231:
1587:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2332              		.loc 1 1587 0
 2333 001c A46B     		ldr	r4, [r4, #56]
 2334              	.LVL232:
1589:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2335              		.loc 1 1589 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 86


 2336 001e FFF7FEFF 		bl	vPortExitCritical
 2337              	.LVL233:
1592:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2338              		.loc 1 1592 0
 2339 0022 2046     		mov	r0, r4
 2340 0024 10BD     		pop	{r4, pc}
 2341              		.cfi_endproc
 2342              	.LFE16:
 2344              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2345              		.align	1
 2346              		.global	uxQueueSpacesAvailable
 2347              		.syntax unified
 2348              		.thumb
 2349              		.thumb_func
 2350              		.fpu fpv4-sp-d16
 2352              	uxQueueSpacesAvailable:
 2353              	.LFB17:
1596:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
 2354              		.loc 1 1596 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              	.LVL234:
1601:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2359              		.loc 1 1601 0
 2360 0000 40B9     		cbnz	r0, .L209
 2361              	.LBB168:
 2362              	.LBB169:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2363              		.loc 2 237 0
 2364              		.syntax unified
 2365              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2366 0002 4FF05003 			mov r3, #80												
 2367 0006 83F31188 		msr basepri, r3											
 2368 000a BFF36F8F 		isb														
 2369 000e BFF34F8F 		dsb														
 2370              	
 2371              	@ 0 "" 2
 2372              	.LVL235:
 2373              		.thumb
 2374              		.syntax unified
 2375              	.L210:
 2376 0012 FEE7     		b	.L210
 2377              	.L209:
 2378              	.LBE169:
 2379              	.LBE168:
1596:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
 2380              		.loc 1 1596 0
 2381 0014 10B5     		push	{r4, lr}
 2382              	.LCFI31:
 2383              		.cfi_def_cfa_offset 8
 2384              		.cfi_offset 4, -8
 2385              		.cfi_offset 14, -4
 2386 0016 0446     		mov	r4, r0
1603:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2387              		.loc 1 1603 0
 2388 0018 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 87


 2389              	.LVL236:
1605:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2390              		.loc 1 1605 0
 2391 001c E36B     		ldr	r3, [r4, #60]
 2392 001e A46B     		ldr	r4, [r4, #56]
 2393              	.LVL237:
 2394 0020 1C1B     		subs	r4, r3, r4
 2395              	.LVL238:
1607:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2396              		.loc 1 1607 0
 2397 0022 FFF7FEFF 		bl	vPortExitCritical
 2398              	.LVL239:
1610:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2399              		.loc 1 1610 0
 2400 0026 2046     		mov	r0, r4
 2401 0028 10BD     		pop	{r4, pc}
 2402              		.cfi_endproc
 2403              	.LFE17:
 2405              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2406              		.align	1
 2407              		.global	uxQueueMessagesWaitingFromISR
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
 2411              		.fpu fpv4-sp-d16
 2413              	uxQueueMessagesWaitingFromISR:
 2414              	.LFB18:
1614:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** UBaseType_t uxReturn;
 2415              		.loc 1 1614 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
 2420              	.LVL240:
1617:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2421              		.loc 1 1617 0
 2422 0000 08B1     		cbz	r0, .L216
1619:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2423              		.loc 1 1619 0
 2424 0002 806B     		ldr	r0, [r0, #56]
 2425              	.LVL241:
1622:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2426              		.loc 1 1622 0
 2427 0004 7047     		bx	lr
 2428              	.LVL242:
 2429              	.L216:
 2430              	.LBB170:
 2431              	.LBB171:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2432              		.loc 2 237 0
 2433              		.syntax unified
 2434              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2435 0006 4FF05003 			mov r3, #80												
 2436 000a 83F31188 		msr basepri, r3											
 2437 000e BFF36F8F 		isb														
 2438 0012 BFF34F8F 		dsb														
 2439              	
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 88


 2440              	@ 0 "" 2
 2441              	.LVL243:
 2442              		.thumb
 2443              		.syntax unified
 2444              	.L215:
 2445 0016 FEE7     		b	.L215
 2446              	.LBE171:
 2447              	.LBE170:
 2448              		.cfi_endproc
 2449              	.LFE18:
 2451              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2452              		.align	1
 2453              		.global	xQueueIsQueueEmptyFromISR
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2457              		.fpu fpv4-sp-d16
 2459              	xQueueIsQueueEmptyFromISR:
 2460              	.LFB24:
1936:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
 2461              		.loc 1 1936 0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
 2466              	.LVL244:
1939:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2467              		.loc 1 1939 0
 2468 0000 18B1     		cbz	r0, .L222
1940:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2469              		.loc 1 1940 0
 2470 0002 836B     		ldr	r3, [r0, #56]
 2471 0004 53B9     		cbnz	r3, .L221
1942:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2472              		.loc 1 1942 0
 2473 0006 0120     		movs	r0, #1
 2474              	.LVL245:
 2475 0008 7047     		bx	lr
 2476              	.LVL246:
 2477              	.L222:
 2478              	.LBB172:
 2479              	.LBB173:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2480              		.loc 2 237 0
 2481              		.syntax unified
 2482              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2483 000a 4FF05003 			mov r3, #80												
 2484 000e 83F31188 		msr basepri, r3											
 2485 0012 BFF36F8F 		isb														
 2486 0016 BFF34F8F 		dsb														
 2487              	
 2488              	@ 0 "" 2
 2489              	.LVL247:
 2490              		.thumb
 2491              		.syntax unified
 2492              	.L219:
 2493 001a FEE7     		b	.L219
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 89


 2494              	.L221:
 2495              	.LBE173:
 2496              	.LBE172:
1946:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2497              		.loc 1 1946 0
 2498 001c 0020     		movs	r0, #0
 2499              	.LVL248:
1950:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2500              		.loc 1 1950 0
 2501 001e 7047     		bx	lr
 2502              		.cfi_endproc
 2503              	.LFE24:
 2505              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2506              		.align	1
 2507              		.global	xQueueIsQueueFullFromISR
 2508              		.syntax unified
 2509              		.thumb
 2510              		.thumb_func
 2511              		.fpu fpv4-sp-d16
 2513              	xQueueIsQueueFullFromISR:
 2514              	.LFB26:
1972:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1973:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1974:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** {
 2515              		.loc 1 1975 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 0
 2518              		@ frame_needed = 0, uses_anonymous_args = 0
 2519              		@ link register save eliminated.
 2520              	.LVL249:
1976:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** BaseType_t xReturn;
1977:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1978:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	configASSERT( xQueue );
 2521              		.loc 1 1978 0
 2522 0000 28B1     		cbz	r0, .L228
1979:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2523              		.loc 1 1979 0
 2524 0002 826B     		ldr	r2, [r0, #56]
 2525 0004 C36B     		ldr	r3, [r0, #60]
 2526 0006 9A42     		cmp	r2, r3
 2527 0008 0AD1     		bne	.L227
1980:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1981:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xReturn = pdTRUE;
 2528              		.loc 1 1981 0
 2529 000a 0120     		movs	r0, #1
 2530              	.LVL250:
 2531 000c 7047     		bx	lr
 2532              	.LVL251:
 2533              	.L228:
 2534              	.LBB174:
 2535              	.LBB175:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2536              		.loc 2 237 0
 2537              		.syntax unified
 2538              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2539 000e 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 90


 2540 0012 83F31188 		msr basepri, r3											
 2541 0016 BFF36F8F 		isb														
 2542 001a BFF34F8F 		dsb														
 2543              	
 2544              	@ 0 "" 2
 2545              	.LVL252:
 2546              		.thumb
 2547              		.syntax unified
 2548              	.L225:
 2549 001e FEE7     		b	.L225
 2550              	.L227:
 2551              	.LBE175:
 2552              	.LBE174:
1982:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1983:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	else
1984:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1985:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		xReturn = pdFALSE;
 2553              		.loc 1 1985 0
 2554 0020 0020     		movs	r0, #0
 2555              	.LVL253:
1986:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
1987:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1988:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	return xReturn;
1989:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2556              		.loc 1 1989 0
 2557 0022 7047     		bx	lr
 2558              		.cfi_endproc
 2559              	.LFE26:
 2561              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2562              		.align	1
 2563              		.global	vQueueAddToRegistry
 2564              		.syntax unified
 2565              		.thumb
 2566              		.thumb_func
 2567              		.fpu fpv4-sp-d16
 2569              	vQueueAddToRegistry:
 2570              	.LFB27:
1990:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
1991:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1992:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1994:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
1996:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xReturn;
1997:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
1999:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portDISABLE_INTERRUPTS();
2003:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2004:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2006:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				posting? */
2008:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 91


2010:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return indicating that we need to block. */
2012:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portENABLE_INTERRUPTS();
2014:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_BLOCKED;
2015:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2016:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2017:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2018:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portENABLE_INTERRUPTS();
2019:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_FULL;
2020:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2021:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2022:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2023:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portENABLE_INTERRUPTS();
2024:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2025:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portDISABLE_INTERRUPTS();
2026:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2027:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2029:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xReturn = pdPASS;
2032:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2033:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2036:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* In this instance the co-routine could be placed directly
2037:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					into the ready list as we are within a critical section.
2038:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					the event were caused from within an interrupt. */
2040:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2042:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						that a yield might be appropriate. */
2044:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						xReturn = errQUEUE_YIELD;
2045:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2046:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
2047:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2048:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2050:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2051:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2052:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2053:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2055:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2056:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2057:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2058:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xReturn = errQUEUE_FULL;
2059:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2060:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2061:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portENABLE_INTERRUPTS();
2062:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2063:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xReturn;
2064:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
2065:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2066:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 92


2067:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2068:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2069:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2071:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
2073:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xReturn;
2074:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2076:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portDISABLE_INTERRUPTS();
2080:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2081:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2083:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				leave with nothing? */
2085:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2087:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					indicating that we need to block. */
2089:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portENABLE_INTERRUPTS();
2091:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_BLOCKED;
2092:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2093:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2094:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2095:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					portENABLE_INTERRUPTS();
2096:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					return errQUEUE_FULL;
2097:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2098:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2099:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2100:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2101:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2103:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2104:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portENABLE_INTERRUPTS();
2105:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2106:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portDISABLE_INTERRUPTS();
2107:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2108:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2110:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Data is available from the queue. */
2111:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2114:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2116:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2117:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2118:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2120:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2123:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xReturn = pdPASS;
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 93


2124:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2125:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2128:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					/* In this instance the co-routine could be placed directly
2129:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					into the ready list as we are within a critical section.
2130:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					the event were caused from within an interrupt. */
2132:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2134:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						xReturn = errQUEUE_YIELD;
2135:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2136:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
2137:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2138:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2140:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2141:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2142:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2143:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2145:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2146:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2147:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2148:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xReturn = pdFAIL;
2149:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2150:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2151:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		portENABLE_INTERRUPTS();
2152:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2153:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xReturn;
2154:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
2155:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2156:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2158:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2159:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2161:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
2163:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2165:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		exit without doing anything. */
2167:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2169:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2171:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			co-routine has not already been woken. */
2173:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2175:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2177:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2179:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						return pdTRUE;
2180:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 94


2181:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
2182:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2183:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2185:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2186:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2187:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2188:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2190:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2191:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2192:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2193:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2195:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2196:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
2197:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2198:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2200:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2201:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
2203:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2204:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2206:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2207:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2209:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
2211:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	BaseType_t xReturn;
2212:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2214:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		not then just leave without doing anything. */
2216:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2218:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			/* Copy the data from the queue. */
2219:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2222:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2224:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2225:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2226:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2228:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2231:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2233:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2235:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						*pxCoRoutineWoken = pdTRUE;
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 95


2238:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2239:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					else
2240:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					{
2241:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					}
2243:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2244:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				else
2245:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				{
2246:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				}
2248:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2249:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2250:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2251:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2253:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2254:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdPASS;
2255:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2256:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		else
2257:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2258:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			xReturn = pdFAIL;
2259:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2260:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2261:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return xReturn;
2262:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
2263:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2264:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2266:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2267:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2269:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2571              		.loc 1 2270 0
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 0
 2574              		@ frame_needed = 0, uses_anonymous_args = 0
 2575              		@ link register save eliminated.
 2576              	.LVL254:
2271:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t ux;
2272:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2273:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		a free slot. */
2275:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2577              		.loc 1 2275 0
 2578 0000 0023     		movs	r3, #0
 2579              	.LVL255:
 2580              	.L230:
 2581              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2582 0002 072B     		cmp	r3, #7
 2583 0004 0CD8     		bhi	.L234
2276:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2277:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2584              		.loc 1 2277 0 is_stmt 1
 2585 0006 074A     		ldr	r2, .L236
 2586 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2587 000c 0AB1     		cbz	r2, .L235
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 96


2275:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 2588              		.loc 1 2275 0 discriminator 2
 2589 000e 0133     		adds	r3, r3, #1
 2590              	.LVL256:
 2591 0010 F7E7     		b	.L230
 2592              	.L235:
2278:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2279:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Store the information on this queue. */
2280:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2593              		.loc 1 2280 0
 2594 0012 044A     		ldr	r2, .L236
 2595 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2281:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2596              		.loc 1 2281 0
 2597 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2598              	.LVL257:
 2599 001c 5860     		str	r0, [r3, #4]
2282:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2283:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				break;
 2600              		.loc 1 2284 0
 2601 001e 7047     		bx	lr
 2602              	.LVL258:
 2603              	.L234:
2285:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2286:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2287:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2288:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2290:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2291:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2604              		.loc 1 2291 0
 2605 0020 7047     		bx	lr
 2606              	.L237:
 2607 0022 00BF     		.align	2
 2608              	.L236:
 2609 0024 00000000 		.word	xQueueRegistry
 2610              		.cfi_endproc
 2611              	.LFE27:
 2613              		.section	.text.pcQueueGetName,"ax",%progbits
 2614              		.align	1
 2615              		.global	pcQueueGetName
 2616              		.syntax unified
 2617              		.thumb
 2618              		.thumb_func
 2619              		.fpu fpv4-sp-d16
 2621              	pcQueueGetName:
 2622              	.LFB28:
2292:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2293:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2295:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2296:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2298:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2623              		.loc 1 2299 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 97


 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 2627              		@ link register save eliminated.
 2628              	.LVL259:
2300:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t ux;
2301:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2303:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		removing entries from the registry while it is being searched. */
2305:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2629              		.loc 1 2305 0
 2630 0000 0023     		movs	r3, #0
 2631              	.LVL260:
 2632              	.L239:
 2633              		.loc 1 2305 0 is_stmt 0 discriminator 1
 2634 0002 072B     		cmp	r3, #7
 2635 0004 0BD8     		bhi	.L243
2306:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2307:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2636              		.loc 1 2307 0 is_stmt 1
 2637 0006 074A     		ldr	r2, .L245
 2638 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2639 000c 5268     		ldr	r2, [r2, #4]
 2640 000e 8242     		cmp	r2, r0
 2641 0010 01D0     		beq	.L244
2305:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 2642              		.loc 1 2305 0 discriminator 2
 2643 0012 0133     		adds	r3, r3, #1
 2644              	.LVL261:
 2645 0014 F5E7     		b	.L239
 2646              	.L244:
2308:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2309:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2647              		.loc 1 2309 0
 2648 0016 034A     		ldr	r2, .L245
 2649 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2650              	.LVL262:
2310:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				break;
 2651              		.loc 1 2310 0
 2652 001c 7047     		bx	lr
 2653              	.LVL263:
 2654              	.L243:
2301:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
 2655              		.loc 1 2301 0
 2656 001e 0020     		movs	r0, #0
 2657              	.LVL264:
2311:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2312:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2313:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2314:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2316:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2317:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2318:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		return pcReturn;
2319:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2658              		.loc 1 2319 0
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 98


 2659 0020 7047     		bx	lr
 2660              	.L246:
 2661 0022 00BF     		.align	2
 2662              	.L245:
 2663 0024 00000000 		.word	xQueueRegistry
 2664              		.cfi_endproc
 2665              	.LFE28:
 2667              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2668              		.align	1
 2669              		.global	vQueueUnregisterQueue
 2670              		.syntax unified
 2671              		.thumb
 2672              		.thumb_func
 2673              		.fpu fpv4-sp-d16
 2675              	vQueueUnregisterQueue:
 2676              	.LFB29:
2320:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2321:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
2323:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2324:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2326:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	{
 2677              		.loc 1 2327 0
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 0
 2680              		@ frame_needed = 0, uses_anonymous_args = 0
 2681              		@ link register save eliminated.
 2682              	.LVL265:
2328:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	UBaseType_t ux;
2329:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2330:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		registry. */
2332:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2683              		.loc 1 2332 0
 2684 0000 0023     		movs	r3, #0
 2685              	.LVL266:
 2686              	.L248:
 2687              		.loc 1 2332 0 is_stmt 0 discriminator 1
 2688 0002 072B     		cmp	r3, #7
 2689 0004 0FD8     		bhi	.L252
2333:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
2334:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2690              		.loc 1 2334 0 is_stmt 1
 2691 0006 084A     		ldr	r2, .L254
 2692 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2693 000c 5268     		ldr	r2, [r2, #4]
 2694 000e 8242     		cmp	r2, r0
 2695 0010 01D0     		beq	.L253
2332:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		{
 2696              		.loc 1 2332 0 discriminator 2
 2697 0012 0133     		adds	r3, r3, #1
 2698              	.LVL267:
 2699 0014 F5E7     		b	.L248
 2700              	.L253:
2335:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 99


2336:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2701              		.loc 1 2337 0
 2702 0016 044A     		ldr	r2, .L254
 2703 0018 0021     		movs	r1, #0
 2704 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2338:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2339:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				appear in the registry twice if it is added, removed, then
2341:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				added again. */
2342:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2705              		.loc 1 2342 0
 2706 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2707              	.LVL268:
 2708 0022 5960     		str	r1, [r3, #4]
2343:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				break;
 2709              		.loc 1 2343 0
 2710 0024 7047     		bx	lr
 2711              	.LVL269:
 2712              	.L252:
2344:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2345:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			else
2346:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			{
2347:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 			}
2349:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 		}
2350:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 
2351:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2713              		.loc 1 2351 0
 2714 0026 7047     		bx	lr
 2715              	.L255:
 2716              		.align	2
 2717              	.L254:
 2718 0028 00000000 		.word	xQueueRegistry
 2719              		.cfi_endproc
 2720              	.LFE29:
 2722              		.section	.text.vQueueDelete,"ax",%progbits
 2723              		.align	1
 2724              		.global	vQueueDelete
 2725              		.syntax unified
 2726              		.thumb
 2727              		.thumb_func
 2728              		.fpu fpv4-sp-d16
 2730              	vQueueDelete:
 2731              	.LFB19:
1626:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2732              		.loc 1 1626 0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 0
 2735              		@ frame_needed = 0, uses_anonymous_args = 0
 2736              	.LVL270:
 2737 0000 08B5     		push	{r3, lr}
 2738              	.LCFI32:
 2739              		.cfi_def_cfa_offset 8
 2740              		.cfi_offset 3, -8
 2741              		.cfi_offset 14, -4
 2742              	.LVL271:
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 100


1629:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2743              		.loc 1 1629 0
 2744 0002 40B9     		cbnz	r0, .L257
 2745              	.LBB176:
 2746              	.LBB177:
 237:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F\portmacro.h **** 	(
 2747              		.loc 2 237 0
 2748              		.syntax unified
 2749              	@ 237 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS
 2750 0004 4FF05003 			mov r3, #80												
 2751 0008 83F31188 		msr basepri, r3											
 2752 000c BFF36F8F 		isb														
 2753 0010 BFF34F8F 		dsb														
 2754              	
 2755              	@ 0 "" 2
 2756              	.LVL272:
 2757              		.thumb
 2758              		.syntax unified
 2759              	.L258:
 2760 0014 FEE7     		b	.L258
 2761              	.L257:
 2762              	.LBE177:
 2763              	.LBE176:
1634:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** 	}
 2764              		.loc 1 1634 0
 2765 0016 FFF7FEFF 		bl	vQueueUnregisterQueue
 2766              	.LVL273:
1664:C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/FreeRTOS/Source\queue.c **** /*-----------------------------------------------------------*/
 2767              		.loc 1 1664 0
 2768 001a 08BD     		pop	{r3, pc}
 2769              		.cfi_endproc
 2770              	.LFE19:
 2772              		.comm	xQueueRegistry,64,4
 2773              		.text
 2774              	.Letext0:
 2775              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 2776              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2777              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2778              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2779              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2780              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2781              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 2782              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 2783              		.file 11 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/Free
 2784              		.file 12 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/Free
 2785              		.file 13 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/Free
 2786              		.file 14 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/Free
 2787              		.file 15 "<built-in>"
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 101


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:18     .text.prvIsQueueFull:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:24     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:66     .text.prvIsQueueEmpty:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:72     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:111    .text.prvCopyDataToQueue:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:117    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:236    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:242    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:291    .text.prvUnlockQueue:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:297    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:403    .text.xQueueGenericReset:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:410    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:519    .text.xQueueGenericReset:00000080 $d
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:524    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:530    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:572    .text.xQueueGenericCreateStatic:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:579    .text.xQueueGenericCreateStatic:00000000 xQueueGenericCreateStatic
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:737    .text.xQueueGenericSend:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:744    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1068   .text.xQueueGenericSend:00000178 $d
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1073   .text.prvInitialiseMutex:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1079   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1119   .text.xQueueCreateMutexStatic:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1126   .text.xQueueCreateMutexStatic:00000000 xQueueCreateMutexStatic
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1168   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1175   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1373   .text.xQueueGiveFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1380   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1588   .text.xQueueGenericReceive:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1595   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1952   .text.xQueueGenericReceive:000001a0 $d
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1957   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:1964   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2135   .text.xQueuePeekFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2142   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2287   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2294   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2345   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2352   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2406   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2413   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2452   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2459   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2506   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2513   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2562   .text.vQueueAddToRegistry:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2569   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2609   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2614   .text.pcQueueGetName:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2621   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2663   .text.pcQueueGetName:00000024 $d
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2668   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2675   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2718   .text.vQueueUnregisterQueue:00000028 $d
ARM GAS  C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s 			page 102


C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2723   .text.vQueueDelete:00000000 $t
C:\Users\073be\AppData\Local\Temp\cc3ncdJM.s:2730   .text.vQueueDelete:00000000 vQueueDelete

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
xTaskGetSchedulerState
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
