ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"robo_tasks.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	StartDefaultTask:
  26              	.LFB136:
  27              		.file 1 "Core/Src/robot/robo_tasks.cpp"
   1:Core/Src/robot/robo_tasks.cpp **** /*
   2:Core/Src/robot/robo_tasks.cpp ****  *
   3:Core/Src/robot/robo_tasks.cpp ****  */
   4:Core/Src/robot/robo_tasks.cpp **** 
   5:Core/Src/robot/robo_tasks.cpp **** #include "FreeRTOS.h"
   6:Core/Src/robot/robo_tasks.cpp **** #include "task.h"
   7:Core/Src/robot/robo_tasks.cpp **** #include "main.h"
   8:Core/Src/robot/robo_tasks.cpp **** #include "cmsis_os.h"
   9:Core/Src/robot/robo_tasks.cpp **** #include "usb_device.h"
  10:Core/Src/robot/robo_tasks.cpp **** 
  11:Core/Src/robot/robo_tasks.cpp **** /* Export Functions Used in C */
  12:Core/Src/robot/robo_tasks.cpp **** extern "C" void StartDefaultTask(void const *argument);
  13:Core/Src/robot/robo_tasks.cpp **** extern "C" void RobotThread(void const *argument);
  14:Core/Src/robot/robo_tasks.cpp **** extern "C" void LoggingThread(void const *argument);
  15:Core/Src/robot/robo_tasks.cpp **** 
  16:Core/Src/robot/robo_tasks.cpp **** /* USER CODE BEGIN Header_StartDefaultTask */
  17:Core/Src/robot/robo_tasks.cpp **** /**
  18:Core/Src/robot/robo_tasks.cpp ****   * @brief  Function implementing the defaultTask thread.
  19:Core/Src/robot/robo_tasks.cpp ****   * @param  argument: Not used 
  20:Core/Src/robot/robo_tasks.cpp ****   * @retval None
  21:Core/Src/robot/robo_tasks.cpp ****   */
  22:Core/Src/robot/robo_tasks.cpp **** /* USER CODE END Header_StartDefaultTask */
  23:Core/Src/robot/robo_tasks.cpp **** void StartDefaultTask(void const *argument)
  24:Core/Src/robot/robo_tasks.cpp **** {
  28              		.loc 1 24 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 2


  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  25:Core/Src/robot/robo_tasks.cpp ****         /* Init code for USB_DEVICE */
  26:Core/Src/robot/robo_tasks.cpp ****         MX_USB_DEVICE_Init();
  39              		.loc 1 26 0
  40 0002 FFF7FEFF 		bl	MX_USB_DEVICE_Init
  41              	.LVL1:
  42              	.L2:
  27:Core/Src/robot/robo_tasks.cpp **** 
  28:Core/Src/robot/robo_tasks.cpp ****         /* USER CODE BEGIN StartDefaultTask */
  29:Core/Src/robot/robo_tasks.cpp ****         /* Infinite loop */
  30:Core/Src/robot/robo_tasks.cpp ****         for (;;)
  31:Core/Src/robot/robo_tasks.cpp ****         {
  32:Core/Src/robot/robo_tasks.cpp ****                 printf("Task : StartDefaultTask\n");
  43              		.loc 1 32 0 discriminator 1
  44 0006 0448     		ldr	r0, .L4
  45 0008 FFF7FEFF 		bl	puts
  46              	.LVL2:
  33:Core/Src/robot/robo_tasks.cpp ****                 osDelay(1000);
  47              		.loc 1 33 0 discriminator 1
  48 000c 4FF47A70 		mov	r0, #1000
  49 0010 FFF7FEFF 		bl	osDelay
  50              	.LVL3:
  51 0014 F7E7     		b	.L2
  52              	.L5:
  53 0016 00BF     		.align	2
  54              	.L4:
  55 0018 00000000 		.word	.LC0
  56              		.cfi_endproc
  57              	.LFE136:
  59              		.section	.text.RobotThread,"ax",%progbits
  60              		.align	1
  61              		.global	RobotThread
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	RobotThread:
  68              	.LFB137:
  34:Core/Src/robot/robo_tasks.cpp ****         }
  35:Core/Src/robot/robo_tasks.cpp ****         /* USER CODE END StartDefaultTask */
  36:Core/Src/robot/robo_tasks.cpp **** }
  37:Core/Src/robot/robo_tasks.cpp **** 
  38:Core/Src/robot/robo_tasks.cpp **** /* USER CODE BEGIN Header_RobotThread */
  39:Core/Src/robot/robo_tasks.cpp **** /**
  40:Core/Src/robot/robo_tasks.cpp ****  * @brief Function implementing the RoboSequence thread.
  41:Core/Src/robot/robo_tasks.cpp ****  * @param argument: Not used
  42:Core/Src/robot/robo_tasks.cpp ****  * @retval None
  43:Core/Src/robot/robo_tasks.cpp ****  * 
  44:Core/Src/robot/robo_tasks.cpp ****  * @note This thread is responsible for reading the current state of the robot.
  45:Core/Src/robot/robo_tasks.cpp ****  * 
  46:Core/Src/robot/robo_tasks.cpp ****  *
  47:Core/Src/robot/robo_tasks.cpp ****  * <pre>
  48:Core/Src/robot/robo_tasks.cpp ****  * Tasks performed by this thread :
  49:Core/Src/robot/robo_tasks.cpp ****  * 1) Read orientation given by the OrientationSensor based on the State the
ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 3


  50:Core/Src/robot/robo_tasks.cpp ****  *    robot is in.
  51:Core/Src/robot/robo_tasks.cpp ****  * 2) Read position given by the PositionSensor based on the State the robot is
  52:Core/Src/robot/robo_tasks.cpp ****  *    in.
  53:Core/Src/robot/robo_tasks.cpp ****  * 3) Filter Orientation data.
  54:Core/Src/robot/robo_tasks.cpp ****  *      3.1) Filter roll
  55:Core/Src/robot/robo_tasks.cpp ****  *      3.2) Filter roll compensated pitch
  56:Core/Src/robot/robo_tasks.cpp ****  *      3.3) Filter tilt compensated pitch
  57:Core/Src/robot/robo_tasks.cpp ****  * 4) Rotate the measured position from body frame to the field frame
  58:Core/Src/robot/robo_tasks.cpp ****  * 5) Filter Position Data
  59:Core/Src/robot/robo_tasks.cpp ****  * 
  60:Core/Src/robot/robo_tasks.cpp ****  * 6) Find the robot's state based on it's current position
  61:Core/Src/robot/robo_tasks.cpp ****  * 7) Calculate the robot's angle of attack to reach the next state
  62:Core/Src/robot/robo_tasks.cpp ****  * 8) Calculate the robot's velocity according to it's state
  63:Core/Src/robot/robo_tasks.cpp ****  * 9) Calculate the correction angular velocity of the robot
  64:Core/Src/robot/robo_tasks.cpp ****  * 10) Calculate the omegas of each wheel
  65:Core/Src/robot/robo_tasks.cpp ****  * 
  66:Core/Src/robot/robo_tasks.cpp ****  * 11) Measure omega of each wheels
  67:Core/Src/robot/robo_tasks.cpp ****  * 12) Compute error
  68:Core/Src/robot/robo_tasks.cpp ****  * 13) Compute PID using available PID_Algorithm
  69:Core/Src/robot/robo_tasks.cpp ****  * 14) set Omega of each wheel
  70:Core/Src/robot/robo_tasks.cpp ****  * 15) update new omegas of all wheels at once
  71:Core/Src/robot/robo_tasks.cpp ****  * </pre>
  72:Core/Src/robot/robo_tasks.cpp ****  */
  73:Core/Src/robot/robo_tasks.cpp **** /* USER CODE END Header_RobotThread */
  74:Core/Src/robot/robo_tasks.cpp **** void RobotThread(void const *argument)
  75:Core/Src/robot/robo_tasks.cpp **** {
  69              		.loc 1 75 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL4:
  74 0000 10B5     		push	{r4, lr}
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 4, -8
  78              		.cfi_offset 14, -4
  79              	.LVL5:
  76:Core/Src/robot/robo_tasks.cpp ****         /* USER CODE BEGIN RobotThread */
  77:Core/Src/robot/robo_tasks.cpp ****         uint32_t sample_period = 10;
  78:Core/Src/robot/robo_tasks.cpp **** 
  79:Core/Src/robot/robo_tasks.cpp ****         uint32_t dt = HAL_GetTick();
  80              		.loc 1 79 0
  81 0002 FFF7FEFF 		bl	HAL_GetTick
  82              	.LVL6:
  80:Core/Src/robot/robo_tasks.cpp ****         uint32_t dt_tmp = HAL_GetTick();
  83              		.loc 1 80 0
  84 0006 FFF7FEFF 		bl	HAL_GetTick
  85              	.LVL7:
  81:Core/Src/robot/robo_tasks.cpp **** 
  82:Core/Src/robot/robo_tasks.cpp ****         osDelay(sample_period);
  86              		.loc 1 82 0
  87 000a 0A20     		movs	r0, #10
  88 000c FFF7FEFF 		bl	osDelay
  89              	.LVL8:
  90              	.L7:
  83:Core/Src/robot/robo_tasks.cpp ****         /* Infinite loop */
  84:Core/Src/robot/robo_tasks.cpp ****         for (;;)
ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 4


  85:Core/Src/robot/robo_tasks.cpp ****         {
  86:Core/Src/robot/robo_tasks.cpp ****                 // Since this is the highest priority task, we can be sure that
  87:Core/Src/robot/robo_tasks.cpp ****                 // another task won't start when this task is running
  88:Core/Src/robot/robo_tasks.cpp ****                 dt_tmp = HAL_GetTick();
  91              		.loc 1 88 0
  92 0010 FFF7FEFF 		bl	HAL_GetTick
  93              	.LVL9:
  94 0014 0446     		mov	r4, r0
  95              	.LVL10:
  89:Core/Src/robot/robo_tasks.cpp ****                 dt = dt_tmp - dt;
  90:Core/Src/robot/robo_tasks.cpp ****                 // read_States(dt);
  91:Core/Src/robot/robo_tasks.cpp ****                 // play_Game(dt);
  92:Core/Src/robot/robo_tasks.cpp ****                 // tune_Motors(dt);
  93:Core/Src/robot/robo_tasks.cpp ****                 dt = HAL_GetTick();
  96              		.loc 1 93 0
  97 0016 FFF7FEFF 		bl	HAL_GetTick
  98              	.LVL11:
  94:Core/Src/robot/robo_tasks.cpp ****                 dt_tmp = dt - dt_tmp;
  99              		.loc 1 94 0
 100 001a 001B     		subs	r0, r0, r4
 101              	.LVL12:
  95:Core/Src/robot/robo_tasks.cpp ****                 // Sleep for remaining time of the sampling period if there is
  96:Core/Src/robot/robo_tasks.cpp ****                 // time left
  97:Core/Src/robot/robo_tasks.cpp ****                 if (dt_tmp < sample_period) {
 102              		.loc 1 97 0
 103 001c 0928     		cmp	r0, #9
 104 001e F7D8     		bhi	.L7
  98:Core/Src/robot/robo_tasks.cpp ****                         osDelay(sample_period - dt_tmp);
 105              		.loc 1 98 0
 106 0020 C0F10A00 		rsb	r0, r0, #10
 107              	.LVL13:
 108 0024 FFF7FEFF 		bl	osDelay
 109              	.LVL14:
 110 0028 F2E7     		b	.L7
 111              		.cfi_endproc
 112              	.LFE137:
 114              		.section	.text.LoggingThread,"ax",%progbits
 115              		.align	1
 116              		.global	LoggingThread
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	LoggingThread:
 123              	.LFB138:
  99:Core/Src/robot/robo_tasks.cpp ****                 }
 100:Core/Src/robot/robo_tasks.cpp ****         }
 101:Core/Src/robot/robo_tasks.cpp ****         /* USER CODE END RobotThread */
 102:Core/Src/robot/robo_tasks.cpp **** }
 103:Core/Src/robot/robo_tasks.cpp **** 
 104:Core/Src/robot/robo_tasks.cpp **** /* USER CODE BEGIN Header_LoggingThread */
 105:Core/Src/robot/robo_tasks.cpp **** /**
 106:Core/Src/robot/robo_tasks.cpp **** * @brief Function implementing the logging thread.
 107:Core/Src/robot/robo_tasks.cpp **** * @param argument: Not used
 108:Core/Src/robot/robo_tasks.cpp **** * @retval None
 109:Core/Src/robot/robo_tasks.cpp **** */
 110:Core/Src/robot/robo_tasks.cpp **** /* USER CODE END Header_LoggingThread */
ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 5


 111:Core/Src/robot/robo_tasks.cpp **** void LoggingThread(void const *argument)
 112:Core/Src/robot/robo_tasks.cpp **** {
 124              		.loc 1 112 0
 125              		.cfi_startproc
 126              		@ Volatile: function does not return.
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              	.LVL15:
 130 0000 08B5     		push	{r3, lr}
 131              	.LCFI2:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 3, -8
 134              		.cfi_offset 14, -4
 135              	.LVL16:
 136              	.L11:
 113:Core/Src/robot/robo_tasks.cpp ****         /* USER CODE BEGIN LoggingThread */
 114:Core/Src/robot/robo_tasks.cpp ****         /* Infinite loop */
 115:Core/Src/robot/robo_tasks.cpp ****         for (;;)
 116:Core/Src/robot/robo_tasks.cpp ****         {
 117:Core/Src/robot/robo_tasks.cpp ****                 osDelay(1);
 137              		.loc 1 117 0 discriminator 1
 138 0002 0120     		movs	r0, #1
 139 0004 FFF7FEFF 		bl	osDelay
 140              	.LVL17:
 141 0008 FBE7     		b	.L11
 142              		.cfi_endproc
 143              	.LFE138:
 145              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 146              		.align	2
 147              	.LC0:
 148 0000 5461736B 		.ascii	"Task : StartDefaultTask\000"
 148      203A2053 
 148      74617274 
 148      44656661 
 148      756C7454 
 149              		.text
 150              	.Letext0:
 151              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 152              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 153              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 154              		.file 5 "Core/Inc/FreeRTOSConfig.h"
 155              		.file 6 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Include/core_cm
 156              		.file 7 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/CMSIS/Device/ST/STM32
 157              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 158              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 159              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 160              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 161              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 162              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 163              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 164              		.file 15 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Middlewares/Third_Party/Free
 165              		.file 16 "C:/Users/073be/STM32Cube/Repository/STM32Cube_FW_F4_V1.23.0/Drivers/STM32F4xx_HAL_Driver
 166              		.file 17 "USB_DEVICE/App/usb_device.h"
 167              		.file 18 "<built-in>"
ARM GAS  C:\Users\073be\AppData\Local\Temp\cczvDCHr.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 robo_tasks.cpp
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:18     .text.StartDefaultTask:00000000 $t
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:25     .text.StartDefaultTask:00000000 StartDefaultTask
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:55     .text.StartDefaultTask:00000018 $d
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:60     .text.RobotThread:00000000 $t
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:67     .text.RobotThread:00000000 RobotThread
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:115    .text.LoggingThread:00000000 $t
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:122    .text.LoggingThread:00000000 LoggingThread
C:\Users\073be\AppData\Local\Temp\cczvDCHr.s:146    .rodata.StartDefaultTask.str1.4:00000000 $d

UNDEFINED SYMBOLS
MX_USB_DEVICE_Init
puts
osDelay
HAL_GetTick
